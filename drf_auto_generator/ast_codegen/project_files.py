"""
Django Project Files Generator

This module generates core Django project files using AST.
"""

import ast
from typing import Dict, Any

from django.core.management.utils import get_random_secret_key

from drf_auto_generator.ast_codegen.base import (
    create_import, create_assign, create_call, create_attribute_call,
    create_string_constant, create_boolean_constant, create_list_of_strings,
    add_location, create_keyword
)
from drf_auto_generator.config_validation import DatabaseSettings


# Helper functions for direct AST node creation with line numbers
def _create_name(id_val, ctx=None):
    """Create a Name node with location info"""
    node = ast.Name(id=id_val, ctx=ctx or ast.Load())
    return add_location(node)

def generate_settings_code(project_name: str, app_name: str, kwargs: Dict[str, Any]) -> str:
    """Generate Django settings.py file code using AST."""

    # Create the docstring section
    file_docstring_ast = add_location(ast.Module(
        body=[add_location(ast.Expr(
            value=create_string_constant(f"""\nGenerated by drf-auto-generator.\n\nDjango settings for {project_name}.\n""")
        ))],
        type_ignores=[]
    ))

    # Create imports
    base_imports = [
        ast.ImportFrom(module='pathlib', names=[ast.alias(name='Path', lineno=1, col_offset=0)], level=0, lineno=1, col_offset=0),
        ast.Import(names=[ast.alias(name='os', lineno=1, col_offset=0)], lineno=1, col_offset=0),
        ast.ImportFrom(module='datetime', names=[ast.alias(name='timedelta', lineno=1, col_offset=0)], level=0, lineno=1, col_offset=0),
    ]

    django_imports = [
        ast.ImportFrom(module='dotenv', names=[ast.alias(name='load_dotenv', lineno=1, col_offset=0)], level=0, lineno=1, col_offset=0),
        ast.ImportFrom(module='django.core.exceptions', names=[ast.alias(name='ImproperlyConfigured', lineno=1, col_offset=0)], level=0, lineno=1, col_offset=0),
    ]

    imports = base_imports + django_imports

    # Create body statements
    body = []

    # Adding BASE_DIR = Path(__file__).resolve().parent.parent
    ## Adds Path(__file__).resolve()
    path_resolve_expression = add_location(ast.Call(
        func=ast.Attribute(
            value=add_location(ast.Call(
                func=_create_name('Path'),
                args=[_create_name('__file__')],
                keywords=[]
            )),
            attr='resolve',
            ctx=ast.Load()
        ),
        args=[],
        keywords=[]
    ))

    ## Adds .parent to the result of Path(__file__).resolve()
    first_parent_attr_assignment = add_location(ast.Attribute(
        value=path_resolve_expression,
        attr='parent',
        ctx=ast.Load()
    ))

    ## Adds .parent to the result of Path(__file__).resolve().parent
    second_parent_attr_assignment = add_location(ast.Attribute(
        value=first_parent_attr_assignment,
        attr='parent',
        ctx=ast.Load()
    ))

    body.append(
        create_assign(
            "BASE_DIR",
            second_parent_attr_assignment
        )
    )

    # Add load_dotenv(BASE_DIR / '.env')
    load_dotenv_call = add_location(ast.Call(
        func=_create_name('load_dotenv'),
        args=[
            add_location(ast.BinOp(
                left=_create_name('BASE_DIR'),
                op=ast.Div(),
                right=create_string_constant('.env')
            ))
        ],
        keywords=[]
    ))
    body.append(add_location(ast.Expr(value=load_dotenv_call)))

    # Add SECRET_KEY
    secret_key = kwargs.get('secret_key')
    if secret_key is None:
        secret_key = get_random_secret_key()
    body.append(
        create_assign(
            "SECRET_KEY",
            create_string_constant(secret_key)
        )
    )

    # Add DEBUG
    body.append(
        create_assign(
            "DEBUG",
            create_boolean_constant(True)
        )
    )

    # Add ALLOWED_HOSTS
    body.append(
        create_assign(
            "ALLOWED_HOSTS",
            create_list_of_strings(["*"])
        )
    )

    # Add INSTALLED_APPS
    installed_apps = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        # Third party apps
        'rest_framework',
        'rest_framework.authtoken',
        'corsheaders',
        'drf_spectacular',
        # Local apps
        f'{app_name}'
    ]
    body.append(
        create_assign(
            "INSTALLED_APPS",
            create_list_of_strings(installed_apps)
        )
    )

    # Add MIDDLEWARE
    middleware = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'corsheaders.middleware.CorsMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]
    body.append(
        create_assign(
            "MIDDLEWARE",
            create_list_of_strings(middleware)
        )
    )

    # Add ROOT_URLCONF
    body.append(
        create_assign(
            "ROOT_URLCONF",
            create_string_constant(f"{project_name}.urls")
        )
    )

    # Add TEMPLATES
    templates_dict = add_location(ast.Dict(
        keys=[
            create_string_constant('BACKEND'),
            create_string_constant('DIRS'),
            create_string_constant('APP_DIRS'),
            create_string_constant('OPTIONS')
        ],
        values=[
            create_string_constant('django.template.backends.django.DjangoTemplates'),
            add_location(ast.List(elts=[], ctx=ast.Load())),
            create_boolean_constant(True),
            add_location(ast.Dict(
                keys=[create_string_constant('context_processors')],
                values=[
                    create_list_of_strings([
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ])
                ]
            ))
        ]
    ))
    body.append(
        create_assign(
            "TEMPLATES",
            add_location(ast.List(elts=[templates_dict], ctx=ast.Load()))
        )
    )

    # Add WSGI_APPLICATION
    body.append(
        create_assign(
            "WSGI_APPLICATION",
            create_string_constant(f"{project_name}.wsgi.application")
        )
    )

    # Add DATABASES
    databases = kwargs.get('config', {}).get('databases', {})
    default_database: DatabaseSettings = databases.get('default', {})

    # Handle case where default_database is None or not a DatabaseSettings object
    if default_database is None or not hasattr(default_database, 'ENGINE'):
        default_database_engine = ""
        default_database_name = ""
        default_database_user = ""
        default_database_password = ""
        default_database_host = ""
        default_database_port = ""
    else:
        default_database_engine = default_database.ENGINE
        default_database_name = default_database.NAME
        default_database_user = default_database.USER
        default_database_password = default_database.PASSWORD
        default_database_host = default_database.HOST
        default_database_port = default_database.PORT

    databases_dict = add_location(ast.Dict(
        keys=[create_string_constant('default')],
        values=[
            add_location(ast.Dict(
                keys=[
                    create_string_constant('ENGINE'),
                    create_string_constant('NAME'),
                    create_string_constant('USER'),
                    create_string_constant('PASSWORD'),
                    create_string_constant('HOST'),
                    create_string_constant('PORT'),
                ],
                values=[
                    create_string_constant(default_database_engine),
                    create_string_constant(default_database_name),
                    create_string_constant(default_database_user),
                    create_string_constant(default_database_password),
                    create_string_constant(default_database_host),
                    create_string_constant(default_database_port),
                ]
            ))
        ]
    ))
    body.append(
        create_assign(
            "DATABASES",
            databases_dict
        )
    )

    # Add AUTH_PASSWORD_VALIDATORS
    auth_password_validators = add_location(ast.List(
        elts=[
            add_location(ast.Dict(
                keys=[create_string_constant('NAME')],
                values=[create_string_constant('django.contrib.auth.password_validation.UserAttributeSimilarityValidator')]
            )),
            add_location(ast.Dict(
                keys=[create_string_constant('NAME')],
                values=[create_string_constant('django.contrib.auth.password_validation.MinimumLengthValidator')]
            )),
            add_location(ast.Dict(
                keys=[create_string_constant('NAME')],
                values=[create_string_constant('django.contrib.auth.password_validation.CommonPasswordValidator')]
            )),
            add_location(ast.Dict(
                keys=[create_string_constant('NAME')],
                values=[create_string_constant('django.contrib.auth.password_validation.NumericPasswordValidator')]
            )),
        ],
        ctx=ast.Load()
    ))
    body.append(
        create_assign(
            "AUTH_PASSWORD_VALIDATORS",
            auth_password_validators
        )
    )

    # Add LANGUAGE_CODE
    body.append(
        create_assign(
            "LANGUAGE_CODE",
            create_string_constant('en-us')
        )
    )

    # Add TIME_ZONE
    body.append(
        create_assign(
            "TIME_ZONE",
            create_string_constant('UTC')
        )
    )

    # Add USE_I18N
    body.append(
        create_assign(
            "USE_I18N",
            create_boolean_constant(True)
        )
    )

    # Add USE_TZ
    body.append(
        create_assign(
            "USE_TZ",
            create_boolean_constant(True)
        )
    )

    # Add STATIC_URL
    body.append(
        create_assign(
            "STATIC_URL",
            create_string_constant('static/')
        )
    )

    # Add STATIC_ROOT
    body.append(
        create_assign(
            "STATIC_ROOT",
            add_location(ast.Constant(value='BASE_DIR / staticfiles'))
        )
    )

    # Add DEFAULT_AUTO_FIELD
    body.append(
        create_assign(
            "DEFAULT_AUTO_FIELD",
            create_string_constant('django.db.models.BigAutoField')
        )
    )

    # Add REST_FRAMEWORK settings
    rest_framework_dict = add_location(ast.Dict(
        keys=[
            create_string_constant('DEFAULT_SCHEMA_CLASS'),
            create_string_constant('DEFAULT_AUTHENTICATION_CLASSES'),
            create_string_constant('DEFAULT_PERMISSION_CLASSES'),
            create_string_constant('DEFAULT_PAGINATION_CLASS'),
            create_string_constant('PAGE_SIZE')
        ],
        values=[
            create_string_constant('drf_spectacular.openapi.AutoSchema'),
            create_list_of_strings([
                'rest_framework.authentication.SessionAuthentication',
                'rest_framework.authentication.BasicAuthentication',
            ]),
            create_list_of_strings([
                'rest_framework.permissions.IsAuthenticated',
            ]),
            create_string_constant('rest_framework.pagination.LimitOffsetPagination'),
            add_location(ast.Constant(value=10))
        ]
    ))
    body.append(
        create_assign(
            "REST_FRAMEWORK",
            rest_framework_dict
        )
    )

    # Add CORS settings
    body.append(
        create_assign(
            "CORS_ALLOW_ALL_ORIGINS",
            create_boolean_constant(True)
        )
    )

    # Add LOGGING configuration
    body.append(
        create_assign(
            "LOGGING",
            add_location(ast.Dict(
                keys=[
                    create_string_constant('version'),
                    create_string_constant('disable_existing_loggers'),
                    create_string_constant('formatters'),
                    create_string_constant('handlers'),
                    create_string_constant('loggers'),
                ],
                values=[
                    add_location(ast.Constant(value=1)),  # version
                    create_boolean_constant(False),  # disable_existing_loggers
                    add_location(ast.Dict(
                        keys=[
                            create_string_constant('django.server'),
                        ],
                        values=[
                            add_location(ast.Dict(
                                keys=[
                                    create_string_constant('()'),
                                    create_string_constant('format'),
                                ],
                                values=[
                                    create_string_constant('django.utils.log.ServerFormatter'),
                                    create_string_constant('%(levelname)s %(asctime)s %(module)s %(message)s'),
                                ]
                            )),
                        ]
                    )),
                    add_location(ast.Dict(
                        keys=[
                            create_string_constant('console'),
                        ],
                        values=[
                            add_location(ast.Dict(
                                keys=[
                                    create_string_constant('class'),
                                    create_string_constant('formatter'),
                                ],
                                values=[
                                    create_string_constant('logging.StreamHandler'),
                                    create_string_constant('django.server'),
                                ]
                            )),
                        ]
                    )),
                    add_location(ast.Dict(
                        keys=[
                            create_string_constant('django'),
                        ],
                        values=[
                            add_location(ast.Dict(
                                keys=[
                                    create_string_constant('handlers'),
                                    create_string_constant('level'),
                                    create_string_constant('propagate'),
                                ],
                                values=[
                                    create_list_of_strings(['console']),
                                    create_string_constant('INFO'),
                                    create_boolean_constant(True),
                                ]
                            )),
                        ]
                    )),
                ]
            ))
        )
    )

    # Create the module
    module_body = [file_docstring_ast] + imports + body
    module = add_location(ast.Module(body=module_body, type_ignores=[]))
    return ast.unparse(module)


def generate_root_urls_code(project_name: str, app_name: str) -> str:
    """Generate Django root urls.py file code using AST."""
    # Create imports
    imports = [
        create_import("django.contrib", ["admin"]),
        create_import("django.urls", ["path", "include"]),
        create_import("drf_spectacular.views", ["SpectacularAPIView", "SpectacularRedocView", "SpectacularSwaggerView"]),
        create_import("rest_framework.authtoken", ["views as authtoken_views"]),
    ]

    # Create urlpatterns
    urlpatterns = create_assign(
        "urlpatterns",
        add_location(ast.List(
            elts=[
                create_call(
                    "path",
                    args=[create_string_constant("admin/"), add_location(ast.Attribute(
                        value=_create_name("admin"),
                        attr="site.urls",
                        ctx=ast.Load()
                    ))]
                ),
                create_call(
                    "path",
                    args=[
                        create_string_constant("api/"),
                        create_call(
                            "include",
                            args=[create_string_constant(f"{app_name}.urls")]
                        )
                    ]
                ),
                create_call(
                    "path",
                    args=[create_string_constant("api/schema/"), create_attribute_call("SpectacularAPIView", "as_view", args=[], keywords=[])],
                    keywords=[create_keyword("name", create_string_constant("schema"))]
                ),
                create_call(
                    "path",
                    args=[create_string_constant("api/schema/swagger-ui/"), create_attribute_call("SpectacularSwaggerView", "as_view", args=[], keywords=[create_keyword("url_name", create_string_constant("schema"))])],
                    keywords=[create_keyword("name", create_string_constant("swagger-ui"))]
                ),
                create_call(
                    "path",
                    args=[create_string_constant("api/schema/redoc/"), create_attribute_call("SpectacularRedocView", "as_view", args=[], keywords=[create_keyword("url_name", create_string_constant("schema"))])],
                    keywords=[create_keyword("name", create_string_constant("redoc"))]
                ),
                create_call(
                    "path",
                    args=[create_string_constant("api/auth-token/"), ast.Name(id="authtoken_views.obtain_auth_token", ctx=ast.Load())],
                    keywords=[create_keyword("name", create_string_constant("api_token_auth"))]
                ),
            ],
            ctx=ast.Load()
        ))
    )

    # Create the module
    module = add_location(ast.Module(body=imports + [urlpatterns], type_ignores=[]))

    return ast.unparse(module)


def generate_wsgi_code(project_name: str) -> str:
    """Generate Django wsgi.py file code using AST."""

    file_docstring = add_location(ast.Expr(value=create_string_constant(
        f"""\nWSGI config for {project_name} project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n"""
    )))

    imports = [
        create_import("os"),
        create_import("django.core.wsgi", ["get_wsgi_application"])
    ]

    body = [
        add_location(ast.Expr(
            value=create_attribute_call(
                "os.environ",
                "setdefault",
                args=[
                    create_string_constant("DJANGO_SETTINGS_MODULE"),
                    create_string_constant(f"{project_name}.settings")
                ]
            )
        )),
        create_assign(
            "application",
            create_call("get_wsgi_application")
        )
    ]

    module = add_location(ast.Module(body=[file_docstring] + imports + body, type_ignores=[]))

    return ast.unparse(module)


def generate_asgi_code(project_name: str) -> str:
    """Generate Django asgi.py file code using AST."""
    imports = [
        create_import("os"),
        create_import("django.core.asgi", ["get_asgi_application"])
    ]

    body = [
        add_location(ast.Expr(value=create_string_constant(f"""
ASGI config for {project_name} project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""))),
        add_location(ast.Expr(
            value=create_attribute_call(
                "os.environ",
                "setdefault",
                args=[
                    create_string_constant("DJANGO_SETTINGS_MODULE"),
                    create_string_constant(f"{project_name}.settings")
                ]
            )
        )),
        create_assign(
            "application",
            create_call("get_asgi_application")
        )
    ]

    module = add_location(ast.Module(body=imports + body, type_ignores=[]))

    return ast.unparse(module)


def generate_manage_py_code(project_name: str) -> str:
    """Generate Django manage.py file code using AST."""

    # File docstring
    file_docstring = add_location(ast.Expr(
        value=create_string_constant("""Django's command-line utility for administrative tasks.""")
    ))

    imports = [
        create_import("os"),
        create_import("sys")
    ]

    main_func = add_location(ast.FunctionDef(
        name="main",
        args=add_location(ast.arguments(
            posonlyargs=[],
            args=[],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]
        )),
        body=[
            # Docstring for main function
            add_location(ast.Expr(value=create_string_constant("""Run administrative tasks."""))),

            # os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
            add_location(ast.Expr(
                value=create_attribute_call(
                    "os.environ",
                    "setdefault",
                    args=[
                        create_string_constant("DJANGO_SETTINGS_MODULE"),
                        create_string_constant(f"{project_name}.settings")
                    ]
                )
            )),

            # try/except block for importing execute_from_command_line
            add_location(ast.Try(
                body=[
                    # from django.core.management import execute_from_command_line
                    add_location(ast.ImportFrom(
                        module="django.core.management",
                        names=[add_location(ast.alias(name="execute_from_command_line", asname=None))],
                        level=0
                    ))
                ],
                handlers=[
                    add_location(ast.ExceptHandler(
                        type=_create_name("ImportError"),
                        name="exc",
                        body=[
                            add_location(ast.Raise(
                                exc=add_location(ast.Call(
                                    func=_create_name("ImportError"),
                                    args=[create_string_constant(
                                        "Couldn't import Django. Are you sure it's installed and "
                                        "available on your PYTHONPATH environment variable? Did you "
                                        "forget to activate a virtual environment?"
                                    )],
                                    keywords=[]
                                )),
                                cause=_create_name("exc")
                            ))
                        ]
                    ))
                ],
                orelse=[],
                finalbody=[]
            )),

            # execute_from_command_line(sys.argv)
            add_location(ast.Expr(
                value=add_location(ast.Call(
                    func=_create_name("execute_from_command_line"),
                    args=[add_location(ast.Attribute(
                        value=_create_name("sys"),
                        attr="argv",
                        ctx=ast.Load()
                    ))],
                    keywords=[]
                ))
            ))
        ],
        decorator_list=[],
        returns=None
    ))

    # if __name__ == '__main__': main()
    if_main = add_location(ast.If(
        test=add_location(ast.Compare(
            left=_create_name("__name__"),
            ops=[add_location(ast.Eq())],
            comparators=[create_string_constant("__main__")]
        )),
        body=[
            add_location(ast.Expr(
                value=add_location(ast.Call(
                    func=_create_name("main"),
                    args=[],
                    keywords=[]
                ))
            ))
        ],
        orelse=[]
    ))

    module = add_location(ast.Module(body=[file_docstring] + imports + [main_func, if_main], type_ignores=[]))

    return ast.unparse(module)


def generate_apps_code(app_name: str) -> str:
    """Generate Django apps.py file code using AST."""
    imports = [
        create_import("django.apps", ["AppConfig"])
    ]

    class_def = add_location(ast.ClassDef(
        name=f"{app_name.capitalize()}Config",
        bases=[_create_name("AppConfig")],
        keywords=[],
        body=[
            create_assign(
                "default_auto_field",
                create_string_constant("django.db.models.BigAutoField")
            ),
            create_assign(
                "name",
                create_string_constant(app_name)
            )
        ],
        decorator_list=[]
    ))

    module = add_location(ast.Module(body=imports + [class_def], type_ignores=[]))

    return ast.unparse(module)
