"""
Schemathesis Test Generator - Rewritten from scratch
==================================================

Simple string-based generator that creates properly structured schemathesis integration tests
from OpenAPI specification files.

This module generates working property-based tests that validate API endpoints
against their OpenAPI specifications using the schemathesis library.
"""

from typing import Optional


def generate_schemathesis_tests(
    openapi_spec_path: str,
    output_path: Optional[str] = None,
    base_url: str = "http://127.0.0.1:8000/api/",
    test_class_name: str = "SchemathesisAPITests",
    include_performance: bool = True,
    include_security: bool = True
) -> str:
    """
    Generate schemathesis integration tests from an OpenAPI specification.

    Args:
        openapi_spec_path: Path to the OpenAPI spec YAML file
        output_path: Path where the test file should be saved
        base_url: Base URL for the API server
        test_class_name: Name for the main test class
        include_performance: Whether to include performance tests
        include_security: Whether to include security tests

    Returns:
        Generated Python code as a string
    """

    code = f'''"""
Schemathesis Integration Tests
============================

Auto-generated property-based API tests using schemathesis.
These tests validate API endpoints against the OpenAPI specification.

OpenAPI Spec: {openapi_spec_path}
Base URL: {base_url}

Generated by drf-auto-generator.
"""

import unittest
from pathlib import Path
import yaml
import json


import schemathesis
from hypothesis import settings, Verbosity
import requests

# Use standard unittest - no Django dependencies needed for API integration tests
from unittest import TestCase


# Test Configuration
API_BASE_URL = "{base_url}"
OPENAPI_SPEC_PATH = (
    "{openapi_spec_path}"
)
MAX_EXAMPLES = 50
DEADLINE_MS = 10000


def load_openapi_schema():
    """Load the OpenAPI schema for testing."""
    if not Path(OPENAPI_SPEC_PATH).exists():
        raise FileNotFoundError(f"OpenAPI spec file not found: {{OPENAPI_SPEC_PATH}}")

    # Try loading with schemathesis
    try:
        with open(OPENAPI_SPEC_PATH, 'r') as f:
            return schemathesis.openapi.from_file(f)
    except Exception as e:
        print(f"Schemathesis loading error: {{e}}")

        # Try alternative: convert YAML to JSON and load from dict
        try:
            print("Attempting to load via JSON conversion...")
            with open(OPENAPI_SPEC_PATH, 'r') as f:
                yaml_data = yaml.safe_load(f)
            return schemathesis.openapi.from_dict(yaml_data, base_url=API_BASE_URL)
        except Exception as e2:
            print(f"Alternative loading method also failed: {{e2}}")
            raise e


def setup_http_client():
    """Setup HTTP client with proper headers."""
    session = requests.Session()
    session.headers["Content-Type"] = "application/json"
    session.headers["Accept"] = "application/json"
    return session


# Load schema at module level for schemathesis decorators
schema = load_openapi_schema()


class {test_class_name}(TestCase):
    """Main schemathesis API test class."""

    def setUp(self):
        """Set up individual test case."""
        super().setUp()
        self.client = setup_http_client()

    def tearDown(self):
        """Clean up after test case."""
        if hasattr(self, "client"):
            self.client.close()

    def test_openapi_schema_validation(self):
        """Test that the OpenAPI schema is loaded correctly."""
        self.assertIsNotNone(schema)
        self.assertIsInstance(schema.raw_schema, dict)
        print(f"Schema loaded successfully with {{len(schema.raw_schema.get('paths', {{}}))}} paths")


# Create schemathesis test function outside the class
@schema.parametrize()
@settings(max_examples=MAX_EXAMPLES, deadline=DEADLINE_MS, verbosity=Verbosity.verbose)
def test_api_endpoints_against_schema(case):
    """
    Property-based test that validates all API endpoints against the schema.

    This test will:
    1. Generate random valid requests based on the OpenAPI schema
    2. Send requests to the API endpoints
    3. Validate responses against the schema
    """
    try:
        # Execute the API call and validate response
        case.call_and_validate(base_url=API_BASE_URL)

    except Exception as e:
        # Print detailed error information for debugging
        print(f"API test failed for {{case.method}} {{case.path}}: {{e}}")
        raise e


'''

    # Add performance tests if requested
    if include_performance:
        code += '''
class SchemathesisPerformanceTests(TestCase):
    """Performance tests for API endpoints."""

    def test_response_time_under_threshold(self):
        """Test that API responses are within acceptable time limits."""
        self.skipTest("Performance tests not implemented yet")
        # TODO: Implement performance testing with response time validation


'''

    # Add security tests if requested
    if include_security:
        code += '''
class SchemathesisSecurityTests(TestCase):
    """Security tests for API endpoints."""

    def test_input_validation_security(self):
        """Test API input validation and security."""
        self.skipTest("Security tests not implemented yet")
        # TODO: Implement security testing with malicious inputs


'''

    # Add main execution block
    code += '''
if __name__ == "__main__":
    unittest.main(verbosity=2)
'''

    # Save to file if output path provided
    if output_path:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(code)

    return code


if __name__ == "__main__":
    # Example usage
    import argparse

    parser = argparse.ArgumentParser(description='Generate schemathesis integration tests')
    parser.add_argument('spec_path', help='Path to OpenAPI spec YAML file')
    parser.add_argument('output_path', help='Output path for test file')
    parser.add_argument('--base-url', default='http://localhost:8000', help='API base URL')
    parser.add_argument('--class-name', default='SchemathesisAPITests', help='Test class name')
    parser.add_argument('--no-performance', action='store_true', help='Skip performance tests')
    parser.add_argument('--no-security', action='store_true', help='Skip security tests')

    args = parser.parse_args()

    code = generate_schemathesis_tests(
        openapi_spec_path=args.spec_path,
        output_path=args.output_path,
        base_url=args.base_url,
        test_class_name=args.class_name,
        include_performance=not args.no_performance,
        include_security=not args.no_security
    )

    print(f"Generated schemathesis tests: {args.output_path}")
