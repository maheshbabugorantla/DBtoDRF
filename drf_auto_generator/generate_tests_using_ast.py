#!/usr/bin/env python
"""
Django API Test Generator
------------------------
Generates Django TestCase classes from OpenAPI specifications
with end-to-end test methods for API endpoints, including loopback tests
for complete CRUD operations.

Modified to use the OpenAPI spec generated by openapi_gen.py.
"""

import json
import yaml
import ast
import astor
import argparse
import re
import traceback
from typing import Dict, List, Any, Optional
from urllib.parse import urlparse
from collections import defaultdict

from drf_auto_generator.ast_codegen.base import add_location
from drf_auto_generator.codegen_utils import format_python_code_using_black


# Helper functions for AST node location info
def _create_name(id_val, ctx=None):
    """Create a Name node with location info"""
    node = ast.Name(id=id_val, ctx=ctx or ast.Load())
    return add_location(node)

def _create_arg(arg_name, annotation=None):
    """Create an arg node with location info"""
    node = ast.arg(arg=arg_name, annotation=annotation)
    return add_location(node)

def _create_function_def(name, args, body, decorator_list=None, returns=None):
    """Create a FunctionDef node with location info"""
    func_def = ast.FunctionDef(
        name=name,
        args=add_location(args),
        body=body,
        decorator_list=decorator_list or [],
        returns=returns
    )
    return add_location(func_def)

def _create_class_def(name, bases, body, decorator_list=None):
    """Create a ClassDef node with location info"""
    class_def = ast.ClassDef(
        name=name,
        bases=bases or [],
        keywords=[],
        body=body,
        decorator_list=decorator_list or []
    )
    return add_location(class_def)


class OpenAPISpecHandler:
    """Handles OpenAPI specifications for test generation."""

    def __init__(self, spec: Dict[str, Any]):
        """
        Initialize with an existing OpenAPI spec dictionary.

        Args:
            spec: OpenAPI specification as a dictionary
        """
        self.spec = spec
        self.api_version = self._get_api_version()

    def _get_api_version(self) -> str:
        """Extract the OpenAPI version from the spec."""
        if 'swagger' in self.spec:
            return '2.0'  # OpenAPI 2.0 / Swagger
        elif 'openapi' in self.spec:
            return self.spec['openapi'].split('.')[0]  # OpenAPI 3.x
        else:
            raise ValueError("Unable to determine OpenAPI version")

    def get_endpoints(self) -> Dict[str, Dict]:
        """
        Extract endpoints from the OpenAPI spec.

        Returns:
            A dictionary mapping endpoint paths to their operations
        """
        return self.spec.get('paths', {})

    def get_schemas(self) -> Dict[str, Dict]:
        """
        Extract schemas/definitions from the OpenAPI spec.

        Returns:
            A dictionary mapping schema names to their definitions
        """
        if self.api_version == '2':
            return self.spec.get('definitions', {})
        elif self.api_version == '3':
            return self.spec.get('components', {}).get('schemas', {})
        else:
            raise ValueError(f"Unsupported OpenAPI version: {self.api_version}")

    def get_tags(self) -> List[Dict[str, str]]:
        """
        Get the tags defined in the OpenAPI spec.

        Returns:
            A list of tag objects with name and description
        """
        return self.spec.get('tags', [])

    def get_base_path(self) -> str:
        """Get the base path for API endpoints."""
        if self.api_version == '2':
            return self.spec.get('basePath', '')
        elif self.api_version == '3':
            servers = self.spec.get('servers', [])
            if servers and 'url' in servers[0]:
                url = urlparse(servers[0]['url'])
                return url.path
            return ''
        return ''


class EndpointAnalyzer:
    """Analyze API endpoints to identify resources and their operations."""

    def __init__(self, handler: OpenAPISpecHandler):
        """
        Initialize the analyzer with an OpenAPI spec handler.

        Args:
            handler: An initialized OpenAPISpecHandler instance
        """
        self.handler = handler
        self.endpoints = handler.get_endpoints()
        self.schemas = handler.get_schemas()
        self.base_path = handler.get_base_path()
        self.tags = handler.get_tags()

    def _normalize_path(self, path: str) -> str:
        """Normalize an API path by handling path parameters."""
        # Replace path parameters like {id} with <id>
        return re.sub(r'\{([^}]+)\}', r'<\1>', path)

    def _extract_resource_from_tag(self, tag_name: str) -> str:
        """Extract a clean resource name from a tag name."""
        # The tag name is likely to be the model/resource name directly
        return tag_name

    def identify_resources_from_tags(self) -> Dict[str, Dict]:
        """
        Group endpoints by the tags they are associated with in the OpenAPI spec.

        Returns:
            A dictionary mapping resource names to their endpoints
        """
        resources = defaultdict(dict)

        # Get tag names for easier reference
        tag_names = [tag['name'] for tag in self.tags] if self.tags else []

        # Group endpoints by tags
        for path, operations in self.endpoints.items():
            normalized_path = self._normalize_path(path)

            for method, operation in operations.items():
                if method.lower() not in ('get', 'post', 'put', 'patch', 'delete'):
                    continue

                operation_tags = operation.get('tags', [])
                operation_id = operation.get('operationId', '')

                # If operation has tags, use the first tag as the resource name
                if operation_tags and operation_tags[0] in tag_names:
                    resource_name = self._extract_resource_from_tag(operation_tags[0])
                else:
                    # Fallback to extracting from path
                    resource_name = self._extract_resource_from_path(path)

                # Store the operation using the operationId from the spec
                resources[resource_name][operation_id] = {
                    'path': normalized_path,
                    'method': method.lower(),
                    'operation': operation,
                    'parameters': operation.get('parameters', []),
                    'request_body': operation.get('requestBody', {}),
                    'tags': operation_tags,
                }

        return dict(resources)

    def _extract_resource_from_path(self, path: str) -> str:
        """
        Extract the resource name from an API path.

        Examples:
            /api/v1/users -> users
            /api/v1/users/{id} -> users
            /api/v1/users/{id}/posts -> posts
        """
        # Remove leading base path if present
        if self.base_path and path.startswith(self.base_path):
            path = path[len(self.base_path):]

        # Remove leading slash
        if path.startswith('/'):
            path = path[1:]

        # Split path into segments
        segments = path.split('/')

        # Handle empty paths
        if not segments or not segments[0]:
            return "root"

        # Handle paths with parameters
        for i, segment in enumerate(segments):
            if '{' in segment:
                # Return the previous segment as the resource name
                if i > 0:
                    return segments[i-1]

        # Default to the first segment (typically the resource name in REST APIs)
        return segments[0] if segments else "root"

    def identify_crud_groups(self) -> Dict[str, Dict]:
        """
        Identify groups of CRUD operations for each resource based on tags.

        Returns:
            A dictionary mapping resource names to their CRUD operations
        """
        resources = self.identify_resources_from_tags()
        crud_groups = {}

        # Compile patterns for matching operation IDs to CRUD types
        crud_op_patterns = {
            'list': re.compile(r'^list|^get.*s$', re.IGNORECASE),
            'retrieve': re.compile(r'^retrieve|^get.*Detail|^show', re.IGNORECASE),
            'create': re.compile(r'^create|^add|^new', re.IGNORECASE),
            'update': re.compile(r'^update|^edit', re.IGNORECASE),
            'patch': re.compile(r'^partialUpdate|^patch', re.IGNORECASE),
            'delete': re.compile(r'^delete|^remove', re.IGNORECASE),
        }

        for resource, operations in resources.items():
            crud = {
                'list': None,
                'retrieve': None,
                'create': None,
                'update': None,
                'patch': None,
                'delete': None,
            }

            # First, match by method and path pattern
            for op_id, details in operations.items():
                method = details['method']
                path = details['path']

                if method == 'get' and not re.search(r'<[^>]+>', path):
                    crud['list'] = op_id
                elif method == 'get' and re.search(r'<[^>]+>', path):
                    crud['retrieve'] = op_id
                elif method == 'post':
                    crud['create'] = op_id
                elif method == 'put':
                    crud['update'] = op_id
                elif method == 'patch':
                    crud['patch'] = op_id
                elif method == 'delete':
                    crud['delete'] = op_id

            # Then, refine using operationId patterns for better accuracy
            for op_id, details in operations.items():
                for crud_type, pattern in crud_op_patterns.items():
                    if pattern.match(op_id):
                        # Override if exact match or not assigned yet
                        if not crud[crud_type] or op_id.lower() == f"{crud_type}{resource}".lower():
                            crud[crud_type] = op_id

            # Store the CRUD mapping if at least one operation exists
            if any(crud.values()):
                crud_groups[resource] = {
                    'operations': crud,
                    'paths': {op_id: operations[op_id]['path'] for op_id in crud.values() if op_id}
                }

        return crud_groups


class SchemaAnalyzer:
    """Analyze OpenAPI schemas to generate sample data."""

    def __init__(self, handler: OpenAPISpecHandler):
        """
        Initialize the analyzer with an OpenAPI spec handler.

        Args:
            handler: An initialized OpenAPISpecHandler instance
        """
        self.handler = handler
        self.schemas = handler.get_schemas()

    def _get_reference_name(self, ref: str) -> str:
        """Extract the schema name from a $ref string."""
        if not ref.startswith('#/'):
            return ref

        # Handle OpenAPI 2.0 references
        if ref.startswith('#/definitions/'):
            return ref.replace('#/definitions/', '')

        # Handle OpenAPI 3.0 references
        if ref.startswith('#/components/schemas/'):
            return ref.replace('#/components/schemas/', '')

        return ref

    def _get_sample_value(self, schema: Dict, depth: int = 0) -> Any:
        """
        Generate a sample value based on a schema definition.

        Args:
            schema: Schema definition
            depth: Current recursion depth (to prevent infinite recursion)

        Returns:
            A sample value that conforms to the schema
        """
        if depth > 3:  # Prevent excessive recursion
            return "..."

        # Handle references
        if '$ref' in schema:
            ref_name = self._get_reference_name(schema['$ref'])
            if ref_name in self.schemas:
                return self._get_sample_value(self.schemas[ref_name], depth + 1)
            return f"<{ref_name}>"

        # Handle different types
        schema_type = schema.get('type')

        if schema_type == 'object':
            properties = schema.get('properties', {})
            sample = {}

            for prop, prop_schema in properties.items():
                # Skip readOnly properties for input data
                if prop_schema.get('readOnly', False) and depth == 0:
                    continue

                required = prop in schema.get('required', [])
                if required or depth < 2:  # Only include non-required props at shallow depth
                    sample[prop] = self._get_sample_value(prop_schema, depth + 1)

            return sample

        elif schema_type == 'array':
            items = schema.get('items', {})
            sample_item = self._get_sample_value(items, depth + 1)
            return [sample_item]

        elif schema_type == 'string':
            format_type = schema.get('format', '')
            enum_values = schema.get('enum', [])

            if enum_values:
                return enum_values[0]
            elif format_type == 'date-time':
                return "2023-01-01T00:00:00Z"
            elif format_type == 'date':
                return "2023-01-01"
            elif format_type == 'email':
                return "user@example.com"
            elif format_type == 'uuid':
                return "00000000-0000-0000-0000-000000000000"
            elif format_type == 'uri':
                return "https://example.com"
            else:
                return f"sample_{schema.get('name', 'string')}"

        elif schema_type == 'number' or schema_type == 'integer':
            return 1

        elif schema_type == 'boolean':
            return True

        elif schema_type == 'null':
            return None

        return "sample_value"

    def generate_request_data(self, operation: Dict) -> Dict:
        """
        Generate sample request data for an API operation.

        Args:
            operation: Operation details

        Returns:
            A dictionary with sample request data
        """
        api_version = self.handler.api_version
        request_data = {}

        # Handle OpenAPI 2.0
        if api_version == '2':
            body_param = next((p for p in operation.get('parameters', [])
                              if p.get('in') == 'body'), None)

            if body_param and 'schema' in body_param:
                return self._get_sample_value(body_param['schema'])

        # Handle OpenAPI 3.0
        elif api_version == '3':
            request_body = operation.get('requestBody', {})
            content = request_body.get('content', {})

            # Try application/json first
            if 'application/json' in content:
                schema = content['application/json'].get('schema', {})
                return self._get_sample_value(schema)

            # Try other content types
            for content_type, content_schema in content.items():
                schema = content_schema.get('schema', {})
                return self._get_sample_value(schema)

        return request_data

    def find_schema_for_request(self, operation: Dict) -> Optional[Dict]:
        """
        Find the schema used in a request body.

        Args:
            operation: The operation details

        Returns:
            The schema or None if not found
        """
        api_version = self.handler.api_version

        # Handle OpenAPI 2.0
        if api_version == '2':
            body_param = next((p for p in operation.get('parameters', [])
                              if p.get('in') == 'body'), None)

            if body_param and 'schema' in body_param:
                if '$ref' in body_param['schema']:
                    ref_name = self._get_reference_name(body_param['schema']['$ref'])
                    return self.schemas.get(ref_name)
                return body_param['schema']

        # Handle OpenAPI 3.0
        elif api_version == '3':
            request_body = operation.get('requestBody', {})
            content = request_body.get('content', {})

            # Try application/json first
            if 'application/json' in content:
                schema = content['application/json'].get('schema', {})
                if '$ref' in schema:
                    ref_name = self._get_reference_name(schema['$ref'])
                    return self.schemas.get(ref_name)
                return schema

            # Try other content types
            for content_type, content_schema in content.items():
                schema = content_schema.get('schema', {})
                if '$ref' in schema:
                    ref_name = self._get_reference_name(schema['$ref'])
                    return self.schemas.get(ref_name)
                return schema

        return None


class TestCaseGenerator:
    """Generate Django TestCase classes using Python AST."""

    def __init__(self, endpoint_analyzer: EndpointAnalyzer, schema_analyzer: SchemaAnalyzer, api_base: str):
        """
        Initialize the generator with analyzers.

        Args:
            endpoint_analyzer: An initialized EndpointAnalyzer instance
            schema_analyzer: An initialized SchemaAnalyzer instance
            api_base: The base URL for the API
        """
        self.endpoint_analyzer = endpoint_analyzer
        self.schema_analyzer = schema_analyzer
        self.api_base = api_base.rstrip('/')

    def _create_import_statements(self) -> List[ast.stmt]:
        """Create import statements for the test file."""
        imports = [
            add_location(ast.Import(names=[
                add_location(ast.alias(name='json', lineno=1, col_offset=0))
            ])),
            add_location(ast.ImportFrom(
                module='django.urls',
                names=[
                    add_location(ast.alias(name='reverse', lineno=1, col_offset=0))
                ],
                level=0,
                lineno=1, col_offset=0
            )),
            add_location(ast.ImportFrom(
                module='rest_framework',
                names=[
                    add_location(ast.alias(name='status', lineno=1, col_offset=0))
                ],
                level=0,
                lineno=1, col_offset=0
            )),
            add_location(ast.ImportFrom(
                module='rest_framework.test',
                names=[
                    add_location(ast.alias(name='APITestCase', lineno=1, col_offset=0))
                ],
                level=0,
                lineno=1, col_offset=0
            )),
            add_location(ast.ImportFrom(
                module='django.contrib.auth.models',
                names=[
                    add_location(ast.alias(name='User', lineno=1, col_offset=0))
                ],
                level=0,
                lineno=1, col_offset=0
            )),
        ]

        return imports

    def _create_setup_method(self, resource_name: str) -> ast.FunctionDef:
        """Create the setUp method for the test class."""
        # Create test admin user for authentication
        create_user_call = add_location(ast.Call(
            func=_create_name('User.objects.create_superuser'),
            args=[],
            keywords=[
                add_location(ast.keyword(
                    arg='username',
                    value=add_location(ast.Constant(value='testadmin', lineno=1, col_offset=0))
                )),
                add_location(ast.keyword(
                    arg='email',
                    value=add_location(ast.Constant(value='testadmin@example.com', lineno=1, col_offset=0))
                )),
                add_location(ast.keyword(
                    arg='password',
                    value=add_location(ast.Constant(value='password123', lineno=1, col_offset=0))
                )),
            ]
        ))

        # Assign user to self.admin_user
        user_assign = add_location(ast.Assign(
            targets=[add_location(ast.Attribute(
                value=_create_name('self'),
                attr='admin_user',
                ctx=ast.Store()
            ))],
            value=create_user_call
        ))

        # Login as admin user
        login_call = add_location(ast.Expr(
            value=add_location(ast.Call(
                func=add_location(ast.Attribute(
                    value=_create_name('self.client'),
                    attr='login',
                    ctx=ast.Load()
                )),
                args=[],
                keywords=[
                    add_location(ast.keyword(
                        arg='username',
                        value=add_location(ast.Constant(value='testadmin', lineno=1, col_offset=0))
                    )),
                    add_location(ast.keyword(
                        arg='password',
                        value=add_location(ast.Constant(value='password123', lineno=1, col_offset=0))
                    )),
                ]
            ))
        ))

        # Method body
        body = [user_assign, login_call]

        # Create and return the method
        return _create_function_def(
            name='setUp',
            args=add_location(ast.arguments(
                posonlyargs=[],
                args=[_create_arg('self')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]
            )),
            body=body
        )

    def _create_teardown_method(self) -> ast.FunctionDef:
        """
        Create a tearDown method for the test class.

        Returns:
            An AST FunctionDef node for the tearDown method
        """
        return _create_function_def(
            name='tearDown',
            args=add_location(ast.arguments(
                posonlyargs=[],
                args=[_create_arg('self')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]
            )),
            body=[
                add_location(ast.Expr(
                    value=add_location(ast.Constant(
                        value="Clean up after tests.",
                        kind=None
                    ))
                )),
                # Cleanup user
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=_create_name('self'),
                                attr='admin_user',
                                ctx=ast.Load()
                            )),
                            attr='delete',
                            ctx=ast.Load()
                        )),
                        args=[],
                        keywords=[]
                    ))
                )),
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=_create_name('super'),
                                attr='tearDown',
                                ctx=ast.Load()
                            )),
                            attr='__call__',
                            ctx=ast.Load()
                        )),
                        args=[],
                        keywords=[]
                    ))
                )),
            ],
            decorator_list=[]
        )

    def _add_auth_headers_to_request(self, request_node: ast.Call) -> ast.Call:
        """Add authentication headers to a request call node."""
        for keyword in request_node.keywords:
            if keyword.arg == 'headers':
                # Headers parameter already exists, update it
                return request_node

        # Add headers parameter
        request_node.keywords.append(
            add_location(ast.keyword(
                arg='headers',
                value=add_location(ast.Attribute(
                    value=add_location(ast.Name(id='self')),
                    attr='auth_headers',
                    ctx=ast.Load()
                ))
            ))
        )
        return request_node

    def _generate_request_data_assignment(self, resource_name: str, operation: Dict) -> ast.Assign:
        """
        Generate an assignment statement for request data.

        Args:
            resource_name: Name of the resource
            operation: Operation details

        Returns:
            An AST Assign node for request data
        """
        sample_data = self.schema_analyzer.generate_request_data(operation)

        # Convert sample data to AST Dict node
        data_node = self._dict_to_ast(sample_data)

        return add_location(ast.Assign(
            targets=[add_location(ast.Name(id='data', ctx=ast.Store()))],
            value=data_node
        ))

    def _dict_to_ast(self, data: Any) -> ast.expr:
        """
        Convert a Python dictionary to an AST Dict node.

        Args:
            data: Python dictionary or other data structure

        Returns:
            An AST expression node
        """
        if isinstance(data, dict):
            keys = []
            values = []

            for key, value in data.items():
                keys.append(add_location(ast.Constant(value=key, kind=None)))
                values.append(self._dict_to_ast(value))

            return add_location(ast.Dict(keys=keys, values=values))
        elif isinstance(data, (list, tuple)):
            return add_location(ast.List(
                elts=[self._dict_to_ast(item) for item in data],
                ctx=ast.Load()
            ))
        else:
            return self._value_to_ast(data)

    def _value_to_ast(self, value: Any) -> ast.expr:
        """
        Convert a Python value to an AST expression node.

        Args:
            value: Python value

        Returns:
            An AST expression node
        """
        if value is None:
            return add_location(ast.Constant(value=None, kind=None))
        else:
            return add_location(ast.Constant(value=value, kind=None))

    def _find_primary_key_param(self, path: str, operation: Dict) -> Optional[str]:
        """
        Find the primary key parameter name in a path.

        Args:
            path: The path pattern
            operation: The operation definition

        Returns:
            The primary key parameter name or None
        """
        # Extract path parameters using regex
        path_params = re.findall(r'\{([^}]+)\}', path)

        if not path_params:
            return None

        # If there's only one path parameter, assume it's the primary key
        if len(path_params) == 1:
            return path_params[0]

        # Try to find a parameter that looks like an ID
        id_param = next((p for p in path_params if p.lower() in ('id', 'pk', f'{operation.get("tags", [""])[0].lower()}_id')), None)
        if id_param:
            return id_param

        # Default to the first parameter
        return path_params[0]

    def _create_test_create_method(self, resource_name: str, create_op: Dict,
                                  retrieve_op: Optional[Dict] = None) -> ast.FunctionDef:
        """
        Create a test method for the create operation with authentication.

        Args:
            resource_name: Name of the resource
            create_op: Create operation details
            retrieve_op: Retrieve operation details (optional)

        Returns:
            An AST FunctionDef node for the test method
        """
        body = [
            add_location(ast.Expr(
                value=add_location(ast.Constant(
                    value=f"Test creating a {resource_name} resource.",
                    kind=None
                ))
            )),
        ]

        # Add request data
        sample_data = self.schema_analyzer.generate_request_data(create_op['operation'])
        body.append(self._generate_request_data_assignment(resource_name, create_op['operation']))

        # Add POST request with authentication
        body.extend([
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='url', ctx=ast.Store()))],
                value=add_location(ast.BinOp(
                    left=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='api_base',
                        ctx=ast.Load()
                    )),
                    op=add_location(ast.Add()),
                    right=add_location(ast.Constant(
                        value=f"{create_op['path'].split('<')[0]}/",
                        kind=None
                    ))
                ))
            )),
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='response', ctx=ast.Store()))],
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='client',
                            ctx=ast.Load()
                        )),
                        attr='post',
                        ctx=ast.Load()
                    )),
                    args=[add_location(ast.Name(id='url', ctx=ast.Load()))],
                    keywords=[
                        add_location(ast.keyword(
                            arg='data',
                            value=add_location(ast.Name(id='data', ctx=ast.Load()))
                        )),
                        add_location(ast.keyword(
                            arg='format',
                            value=add_location(ast.Constant(value='json', kind=None))
                        )),
                        add_location(ast.keyword(
                            arg='headers',
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='auth_headers',
                                ctx=ast.Load()
                            ))
                        ))
                    ]
                ))
            )),
            add_location(ast.Expr(
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='assertEqual',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='response', ctx=ast.Load())),
                            attr='status_code',
                            ctx=ast.Load()
                        )),
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='status', ctx=ast.Load())),
                            attr='HTTP_201_CREATED',
                            ctx=ast.Load()
                        ))
                    ],
                    keywords=[]
                ))
            )),
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='response_data', ctx=ast.Store()))],
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='json', ctx=ast.Load())),
                        attr='loads',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='response', ctx=ast.Load())),
                            attr='content',
                            ctx=ast.Load()
                        ))
                    ],
                    keywords=[]
                ))
            )),
        ])

        # Find potential primary key fields - check for field named 'id' or 'pk'
        pk_field = 'id'
        body.append(
            add_location(ast.Expr(
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='assertIn',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Constant(value=pk_field, kind=None)),
                        add_location(ast.Name(id='response_data', ctx=ast.Load()))
                    ],
                    keywords=[]
                ))
            ))
        )

        body.append(
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='resource_id', ctx=ast.Store()))],
                value=add_location(ast.Subscript(
                    value=add_location(ast.Name(id='response_data', ctx=ast.Load())),
                    slice=add_location(ast.Constant(value=pk_field, kind=None)),
                    ctx=ast.Load()
                ))
            ))
        )

        # If retrieve operation is available, add verification with authentication
        if retrieve_op:
            # Find the primary key parameter in the retrieve path
            pk_param = self._find_primary_key_param(retrieve_op['path'], retrieve_op['operation'])
            if not pk_param:
                pk_param = 'id'  # Default if not found

            body.extend([
                add_location(ast.Expr(
                    value=add_location(ast.Constant(
                        value=f"Verify the {resource_name} was created correctly",
                        kind=None
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='detail_url', ctx=ast.Store()))],
                    value=add_location(ast.BinOp(
                        left=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='api_base',
                            ctx=ast.Load()
                        )),
                        op=add_location(ast.Add()),
                        right=add_location(ast.Call(
                            func=add_location(ast.Attribute(
                                value=add_location(ast.Constant(
                                    value=f"{retrieve_op['path'].replace(f'<{pk_param}>', '{}')}/",
                                    kind=None
                                )),
                                attr='format',
                                ctx=ast.Load()
                            )),
                            args=[add_location(ast.Name(id='resource_id', ctx=ast.Load()))],
                            keywords=[]
                        ))
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='get_response', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='client',
                                ctx=ast.Load()
                            )),
                            attr='get',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='detail_url', ctx=ast.Load()))],
                        keywords=[
                            add_location(ast.keyword(
                                arg='headers',
                                value=add_location(ast.Attribute(
                                    value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                ))
                            ))
                        ]
                    ))
                )),
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='assertEqual',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='get_response', ctx=ast.Load())),
                                attr='status_code',
                                ctx=ast.Load()
                            )),
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='status', ctx=ast.Load())),
                                attr='HTTP_200_OK',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='get_data', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='json', ctx=ast.Load())),
                            attr='loads',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='get_response', ctx=ast.Load())),
                                attr='content',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='assertEqual',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Subscript(
                                value=add_location(ast.Name(id='get_data', ctx=ast.Load())),
                                slice=add_location(ast.Constant(value=pk_field, kind=None)),
                                ctx=ast.Load()
                            )),
                            add_location(ast.Name(id='resource_id', ctx=ast.Load()))
                        ],
                        keywords=[]
                    ))
                )),
            ])

            # Get the input schema to check what fields are provided
            request_schema = self.schema_analyzer.find_schema_for_request(create_op['operation'])
            if request_schema and 'properties' in request_schema:
                # Check for each field in the submitted data
                for key in request_schema['properties'].keys():
                    # Skip id, primary key, and common metadata fields
                    if key in (pk_field, 'id', 'pk', 'created_at', 'updated_at', 'created', 'modified'):
                        continue

                    # Skip any read-only properties
                    prop_schema = request_schema['properties'][key]
                    if prop_schema.get('readOnly', False):
                        continue

                    # Only include fields that were in our request data
                    if key in sample_data:
                        body.append(
                            add_location(ast.Expr(
                                value=add_location(ast.Call(
                                    func=add_location(ast.Attribute(
                                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                        attr='assertEqual',
                                        ctx=ast.Load()
                                    )),
                                    args=[
                                        add_location(ast.Subscript(
                                            value=add_location(ast.Name(id='get_data', ctx=ast.Load())),
                                            slice=add_location(ast.Constant(value=key, kind=None)),
                                            ctx=ast.Load()
                                        )),
                                        add_location(ast.Subscript(
                                            value=add_location(ast.Name(id='data', ctx=ast.Load())),
                                            slice=add_location(ast.Constant(value=key, kind=None)),
                                            ctx=ast.Load()
                                        ))
                                    ],
                                    keywords=[]
                                ))
                            ))
                        )

        return _create_function_def(
            name=f'test_create_{resource_name}',
            args=add_location(ast.arguments(
                posonlyargs=[],
                args=[_create_arg('self')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[],
                vararg=None,
                kwarg=None
            )),
            body=body,
            decorator_list=[]
        )

    def _create_test_list_method(self, resource_name: str, list_op: Dict) -> ast.FunctionDef:
        """
        Create a test method for listing resources with authentication.

        Args:
            resource_name: Name of the resource
            list_op: List operation details

        Returns:
            An AST FunctionDef node for the test method
        """
        body = [
            add_location(ast.Expr(
                value=add_location(ast.Constant(
                    value=f"Test listing {resource_name} resources.",
                    kind=None
                ))
            )),
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='url', ctx=ast.Store()))],
                value=add_location(ast.BinOp(
                    left=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='api_base',
                        ctx=ast.Load()
                    )),
                    op=add_location(ast.Add()),
                    right=add_location(ast.Constant(
                        value=f"{list_op['path']}/",
                        kind=None
                    ))
                ))
            )),
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='response', ctx=ast.Store()))],
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='client',
                            ctx=ast.Load()
                        )),
                        attr='get',
                        ctx=ast.Load()
                    )),
                    args=[add_location(ast.Name(id='url', ctx=ast.Load()))],
                    keywords=[
                        add_location(ast.keyword(
                            arg='headers',
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='auth_headers',
                                ctx=ast.Load()
                            ))
                        ))
                    ]
                ))
            )),
            add_location(ast.Expr(
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='assertEqual',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='response', ctx=ast.Load())),
                            attr='status_code',
                            ctx=ast.Load()
                        )),
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='status', ctx=ast.Load())),
                            attr='HTTP_200_OK',
                            ctx=ast.Load()
                        ))
                    ],
                    keywords=[]
                ))
            )),
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='response_data', ctx=ast.Store()))],
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='json', ctx=ast.Load())),
                        attr='loads',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='response', ctx=ast.Load())),
                            attr='content',
                            ctx=ast.Load()
                        ))
                    ],
                    keywords=[]
                ))
            )),
        ]

        # Check pagination structure if it exists in the API
        body.extend([
            add_location(ast.Try(
                body=[
                    add_location(ast.Expr(
                        value=add_location(ast.Call(
                            func=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='assertIn',
                                ctx=ast.Load()
                            )),
                            args=[
                                add_location(ast.Constant(value='results', kind=None)),
                                add_location(ast.Name(id='response_data', ctx=ast.Load()))
                            ],
                            keywords=[]
                        ))
                    )),
                    add_location(ast.Expr(
                        value=add_location(ast.Call(
                            func=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='assertIsInstance',
                                ctx=ast.Load()
                            )),
                            args=[
                                add_location(ast.Subscript(
                                    value=add_location(ast.Name(id='response_data', ctx=ast.Load())),
                                    slice=add_location(ast.Constant(value='results', kind=None)),
                                    ctx=ast.Load()
                                )),
                                add_location(ast.Name(id='list', ctx=ast.Load()))
                            ],
                            keywords=[]
                        ))
                    )),
                ],
                handlers=[
                    add_location(ast.ExceptHandler(
                        type=add_location(ast.Name(id='KeyError', ctx=ast.Load())),
                        name=None,
                        body=[
                            add_location(ast.Expr(
                                value=add_location(ast.Call(
                                    func=add_location(ast.Attribute(
                                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                        attr='assertIsInstance',
                                        ctx=ast.Load()
                                    )),
                                    args=[
                                        add_location(ast.Name(id='response_data', ctx=ast.Load())),
                                        add_location(ast.Name(id='list', ctx=ast.Load()))
                                    ],
                                    keywords=[]
                                ))
                            ))
                        ]
                    )),
                    add_location(ast.ExceptHandler(
                        type=add_location(ast.Name(id='AssertionError', ctx=ast.Load())),
                        name=None,
                        body=[
                            add_location(ast.Expr(
                                value=add_location(ast.Call(
                                    func=add_location(ast.Attribute(
                                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                        attr='assertIsInstance',
                                        ctx=ast.Load()
                                    )),
                                    args=[
                                        add_location(ast.Name(id='response_data', ctx=ast.Load())),
                                        add_location(ast.Name(id='list', ctx=ast.Load()))
                                    ],
                                    keywords=[]
                                ))
                            ))
                        ]
                    )),
                ],
                orelse=[],
                finalbody=[]
            ))
        ])

        return _create_function_def(
            name=f'test_list_{resource_name}',
            args=add_location(ast.arguments(
                posonlyargs=[],
                args=[_create_arg('self')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[],
                vararg=None,
                kwarg=None
            )),
            body=body,
            decorator_list=[]
        )

    def _create_test_retrieve_method(self, resource_name: str, retrieve_op: Dict, create_op: Optional[Dict] = None) -> ast.FunctionDef:
        """
        Create a test method for retrieving a resource with authentication.

        Args:
            resource_name: Name of the resource
            retrieve_op: Retrieve operation details
            create_op: Create operation details (optional)

        Returns:
            An AST FunctionDef node for the test method
        """
        body = [
            add_location(ast.Expr(
                value=add_location(ast.Constant(
                    value=f"Test retrieving a {resource_name} resource.",
                    kind=None
                ))
            )),
        ]

        # Find the primary key parameter in the path
        pk_param = self._find_primary_key_param(retrieve_op['path'], retrieve_op['operation'])
        if not pk_param:
            pk_param = 'id'  # Default if not found

        # If create operation is available, create a resource first
        if create_op:
            body.append(
                add_location(ast.Expr(
                    value=add_location(ast.Constant(
                        value="First, create a resource to retrieve",
                        kind=None
                    ))
                ))
            )

            # Add request data
            body.append(self._generate_request_data_assignment(resource_name, create_op['operation']))

            # Add create request with authentication
            body.extend([
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='create_url', ctx=ast.Store()))],
                    value=add_location(ast.BinOp(
                        left=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='api_base',
                            ctx=ast.Load()
                        )),
                        op=add_location(ast.Add()),
                        right=add_location(ast.Constant(
                            value=f"{create_op['path'].split('<')[0]}/",
                            kind=None
                        ))
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='create_response', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='client',
                                ctx=ast.Load()
                            )),
                            attr='post',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='create_url', ctx=ast.Load()))],
                        keywords=[
                            add_location(ast.keyword(
                                arg='data',
                                value=add_location(ast.Name(id='data', ctx=ast.Load()))
                            )),
                            add_location(ast.keyword(
                                arg='format',
                                value=add_location(ast.Constant(value='json', kind=None))
                            )),
                            add_location(ast.keyword(
                                arg='headers',
                                value=add_location(ast.Attribute(
                                    value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                ))
                            ))
                        ]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='created_data', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='json', ctx=ast.Load())),
                            attr='loads',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='create_response', ctx=ast.Load())),
                                attr='content',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='resource_id', ctx=ast.Store()))],
                    value=add_location(ast.Subscript(
                        value=add_location(ast.Name(id='created_data', ctx=ast.Load())),
                        slice=add_location(ast.Constant(value='id', kind=None)),
                        ctx=ast.Load()
                    ))
                )),
            ])
        else:
            # If no create operation, assume resource with ID 1 exists
            body.append(
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='resource_id', ctx=ast.Store()))],
                    value=add_location(ast.Constant(value=1, kind=None))
                ))
            )

        # Add retrieve request with authentication
        body.extend([
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='retrieve_url', ctx=ast.Store()))],
                value=add_location(ast.BinOp(
                    left=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='api_base',
                        ctx=ast.Load()
                    )),
                    op=add_location(ast.Add()),
                    right=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Constant(
                                value=f"{retrieve_op['path'].replace(f'<{pk_param}>', '{}')}/",
                                kind=None
                            )),
                            attr='format',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='resource_id', ctx=ast.Load()))],
                        keywords=[]
                    ))
                ))
            )),
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='response', ctx=ast.Store()))],
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='client',
                            ctx=ast.Load()
                        )),
                        attr='get',
                        ctx=ast.Load()
                    )),
                    args=[add_location(ast.Name(id='retrieve_url', ctx=ast.Load()))],
                    keywords=[
                        add_location(ast.keyword(
                            arg='headers',
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='auth_headers',
                                ctx=ast.Load()
                            ))
                        ))
                    ]
                ))
            )),
            add_location(ast.Expr(
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='assertEqual',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='response', ctx=ast.Load())),
                            attr='status_code',
                            ctx=ast.Load()
                        )),
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='status', ctx=ast.Load())),
                            attr='HTTP_200_OK',
                            ctx=ast.Load()
                        ))
                    ],
                    keywords=[]
                ))
            )),
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='response_data', ctx=ast.Store()))],
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='json', ctx=ast.Load())),
                        attr='loads',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='response', ctx=ast.Load())),
                            attr='content',
                            ctx=ast.Load()
                        ))
                    ],
                    keywords=[]
                ))
            )),
            add_location(ast.Expr(
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='assertEqual',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Subscript(
                            value=add_location(ast.Name(id='response_data', ctx=ast.Load())),
                            slice=add_location(ast.Constant(value='id', kind=None)),
                            ctx=ast.Load()
                        )),
                        add_location(ast.Name(id='resource_id', ctx=ast.Load()))
                    ],
                    keywords=[]
                ))
            )),
        ])

        return _create_function_def(
            name=f'test_retrieve_{resource_name}',
            args=add_location(ast.arguments(
                posonlyargs=[],
                args=[_create_arg('self')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[],
                vararg=None,
                kwarg=None
            )),
            body=body,
            decorator_list=[]
        )

    def _create_test_update_method(
        self, resource_name: str, update_op: Dict,
        create_op: Optional[Dict] = None,
        retrieve_op: Optional[Dict] = None
    ) -> ast.FunctionDef:
        """
        Create a test method for updating a resource with authentication.

        Args:
            resource_name: Name of the resource
            update_op: Update operation details
            create_op: Create operation details (optional)
            retrieve_op: Retrieve operation details (optional)

        Returns:
            An AST FunctionDef node for the test method
        """
        is_patch = update_op['method'] == 'patch'
        method_name = 'patch' if is_patch else 'update'

        body = [
            add_location(ast.Expr(
                value=add_location(ast.Constant(
                    value=f"Test {method_name} a {resource_name} resource.",
                    kind=None
                ))
            )),
        ]

        # Find the primary key parameter in the path
        pk_param = self._find_primary_key_param(update_op['path'], update_op['operation'])
        if not pk_param:
            pk_param = 'id'  # Default if not found

        # If create operation is available, create a resource first
        if create_op:
            body.append(
                add_location(ast.Expr(
                    value=add_location(ast.Constant(
                        value="First, create a resource to update",
                        kind=None
                    ))
                ))
            )

            # Add request data
            body.append(self._generate_request_data_assignment(resource_name, create_op['operation']))

            # Add create request with authentication
            body.extend([
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='create_url', ctx=ast.Store()))],
                    value=add_location(ast.BinOp(
                        left=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='api_base',
                            ctx=ast.Load()
                        )),
                        op=add_location(ast.Add()),
                        right=add_location(ast.Constant(
                            value=f"{create_op['path'].split('<')[0]}/",
                            kind=None
                        ))
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='create_response', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='client',
                                ctx=ast.Load()
                            )),
                            attr='post',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='create_url', ctx=ast.Load()))],
                        keywords=[
                            add_location(ast.keyword(
                                arg='data',
                                value=add_location(ast.Name(id='data', ctx=ast.Load()))
                            )),
                            add_location(ast.keyword(
                                arg='format',
                                value=add_location(ast.Constant(value='json', kind=None))
                            )),
                            add_location(ast.keyword(
                                arg='headers',
                                value=add_location(ast.Attribute(
                                    value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                ))
                            ))
                        ]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='created_data', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='json', ctx=ast.Load())),
                            attr='loads',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='create_response', ctx=ast.Load())),
                                attr='content',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='resource_id', ctx=ast.Store()))],
                    value=add_location(ast.Subscript(
                        value=add_location(ast.Name(id='created_data', ctx=ast.Load())),
                        slice=add_location(ast.Constant(value='id', kind=None)),
                        ctx=ast.Load()
                    ))
                )),
            ])
        else:
            # If no create operation, assume resource with ID 1 exists
            body.append(
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='resource_id', ctx=ast.Store()))],
                    value=add_location(ast.Constant(value=1, kind=None))
                ))
            )

        # Get the request schema to determine what can be modified
        request_schema = self.schema_analyzer.find_schema_for_request(update_op['operation'])
        modified_field = None

        # Create update data dictionary
        body.append(
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='update_data', ctx=ast.Store()))],
                value=add_location(ast.Dict(
                    keys=[],
                    values=[]
                ))
            ))
        )

        # Find a field to modify and its value
        if request_schema and 'properties' in request_schema:
            for key, prop_schema in request_schema['properties'].items():
                # Skip id, pk, and readonly fields
                if key in ('id', 'pk') or prop_schema.get('readOnly', False):
                    continue

                # Found a field we can modify
                modified_field = key

                # Generate different values based on type
                schema_type = prop_schema.get('type', 'string')
                if schema_type == 'string':
                    modified_value = f"Updated {key} value"
                    body.append(
                        add_location(ast.Assign(
                            targets=[add_location(ast.Subscript(
                                value=add_location(ast.Name(id='update_data', ctx=ast.Load())),
                                slice=add_location(ast.Constant(value=key, kind=None)),
                                ctx=ast.Store()
                            ))],
                            value=add_location(ast.Constant(value=modified_value, kind=None))
                        ))
                    )
                elif schema_type in ('integer', 'number'):
                    body.append(
                        add_location(ast.Assign(
                            targets=[add_location(ast.Subscript(
                                value=add_location(ast.Name(id='update_data', ctx=ast.Load())),
                                slice=add_location(ast.Constant(value=key, kind=None)),
                                ctx=ast.Store()
                            ))],
                            value=add_location(ast.Constant(value=42, kind=None))
                        ))
                    )
                elif schema_type == 'boolean':
                    body.append(
                        add_location(ast.Assign(
                            targets=[add_location(ast.Subscript(
                                value=add_location(ast.Name(id='update_data', ctx=ast.Load())),
                                slice=add_location(ast.Constant(value=key, kind=None)),
                                ctx=ast.Store()
                            ))],
                            value=add_location(ast.Constant(value=True, kind=None))
                        ))
                    )

                # We only need one field to test
                break

        # If no field could be modified, add a test field
        if not modified_field:
            modified_field = 'test_field'
            body.append(
                add_location(ast.Assign(
                    targets=[add_location(ast.Subscript(
                        value=add_location(ast.Name(id='update_data', ctx=ast.Load())),
                        slice=add_location(ast.Constant(value=modified_field, kind=None)),
                        ctx=ast.Store()
                    ))],
                    value=add_location(ast.Constant(value='test_value', kind=None))
                ))
            )

        # Add update request with authentication
        body.extend([
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='update_url', ctx=ast.Store()))],
                value=add_location(ast.BinOp(
                    left=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='api_base',
                        ctx=ast.Load()
                    )),
                    op=add_location(ast.Add()),
                    right=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Constant(
                                value=f"{update_op['path'].replace(f'<{pk_param}>', '{}')}/",
                                kind=None
                            )),
                            attr='format',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='resource_id', ctx=ast.Load()))],
                        keywords=[]
                    ))
                ))
            )),
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='update_response', ctx=ast.Store()))],
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr=update_op['method'],
                            ctx=ast.Load()
                        )),
                        attr='post',
                        ctx=ast.Load()
                    )),
                    args=[add_location(ast.Name(id='update_url', ctx=ast.Load()))],
                    keywords=[
                        add_location(ast.keyword(
                            arg='data',
                            value=add_location(ast.Name(id='update_data', ctx=ast.Load()))
                        )),
                        add_location(ast.keyword(
                            arg='format',
                            value=add_location(ast.Constant(value='json', kind=None))
                        )),
                        add_location(ast.keyword(
                            arg='headers',
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='auth_headers',
                                ctx=ast.Load()
                            ))
                        ))
                    ]
                ))
            )),
            add_location(ast.Expr(
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='assertEqual',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='update_response', ctx=ast.Load())),
                            attr='status_code',
                            ctx=ast.Load()
                        )),
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='status', ctx=ast.Load())),
                            attr='HTTP_200_OK',
                            ctx=ast.Load()
                        ))
                    ],
                    keywords=[]
                ))
            )),
        ])

        # If retrieve operation is available, verify the update
        if retrieve_op:
            # Find the primary key parameter in the retrieve path
            retrieve_pk_param = self._find_primary_key_param(retrieve_op['path'], retrieve_op['operation'])
            if not retrieve_pk_param:
                retrieve_pk_param = 'id'  # Default if not found

            body.extend([
                add_location(ast.Expr(
                    value=add_location(ast.Constant(
                        value="Verify the update with a GET request",
                        kind=None
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='retrieve_url', ctx=ast.Store()))],
                    value=add_location(ast.BinOp(
                        left=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='api_base',
                            ctx=ast.Load()
                        )),
                        op=add_location(ast.Add()),
                        right=add_location(ast.Call(
                            func=add_location(ast.Attribute(
                                value=add_location(ast.Constant(
                                    value=f"{retrieve_op['path'].replace(f'<{retrieve_pk_param}>', '{}')}/",
                                    kind=None
                                )),
                                attr='format',
                                ctx=ast.Load()
                            )),
                            args=[add_location(ast.Name(id='resource_id', ctx=ast.Load()))],
                            keywords=[]
                        ))
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='get_response', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='client',
                                ctx=ast.Load()
                            )),
                            attr='get',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='retrieve_url', ctx=ast.Load()))],
                        keywords=[
                            add_location(ast.keyword(
                                arg='headers',
                                value=add_location(ast.Attribute(
                                    value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                ))
                            ))
                        ]
                    ))
                )),
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='assertEqual',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='get_response', ctx=ast.Load())),
                                attr='status_code',
                                ctx=ast.Load()
                            )),
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='status', ctx=ast.Load())),
                                attr='HTTP_200_OK',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='get_data', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='json', ctx=ast.Load())),
                            attr='loads',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='get_response', ctx=ast.Load())),
                                attr='content',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                # Verify the updated field
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='assertEqual',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Subscript(
                                value=add_location(ast.Name(id='get_data', ctx=ast.Load())),
                                slice=add_location(ast.Constant(value=modified_field, kind=None)),
                                ctx=ast.Load()
                            )),
                            add_location(ast.Subscript(
                                value=add_location(ast.Name(id='update_data', ctx=ast.Load())),
                                slice=add_location(ast.Constant(value=modified_field, kind=None)),
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
            ])

        return _create_function_def(
            name=f'test_{method_name}_{resource_name}',
            args=add_location(ast.arguments(
                posonlyargs=[],
                args=[_create_arg('self')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[],
                vararg=None,
                kwarg=None
            )),
            body=body,
            decorator_list=[]
        )

    def _create_test_delete_method(
        self, resource_name: str, delete_op: Dict,
        create_op: Optional[Dict] = None,
        retrieve_op: Optional[Dict] = None
    ) -> ast.FunctionDef:
        """
        Create a test method for deleting a resource with authentication.

        Args:
            resource_name: Name of the resource
            delete_op: Delete operation details
            create_op: Create operation details (optional)
            retrieve_op: Retrieve operation details (optional)

        Returns:
            An AST FunctionDef node for the test method
        """
        body = [
            add_location(ast.Expr(
                value=add_location(ast.Constant(
                    value=f"Test deleting a {resource_name} resource.",
                    kind=None
                ))
            )),
        ]

        # Find the primary key parameter in the path
        pk_param = self._find_primary_key_param(delete_op['path'], delete_op['operation'])
        if not pk_param:
            pk_param = 'id'  # Default if not found

        # If create operation is available, create a resource first
        if create_op:
            body.append(
                add_location(ast.Expr(
                    value=add_location(ast.Constant(
                        value="First, create a resource to delete",
                        kind=None
                    ))
                ))
            )

            # Add request data
            body.append(self._generate_request_data_assignment(resource_name, create_op['operation']))

            # Add create request with authentication
            body.extend([
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='create_url', ctx=ast.Store()))],
                    value=add_location(ast.BinOp(
                        left=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='api_base',
                            ctx=ast.Load()
                        )),
                        op=add_location(ast.Add()),
                        right=add_location(ast.Constant(
                            value=f"{create_op['path'].split('<')[0]}/",
                            kind=None
                        ))
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='create_response', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='client',
                                ctx=ast.Load()
                            )),
                            attr='post',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='create_url', ctx=ast.Load()))],
                        keywords=[
                            add_location(ast.keyword(
                                arg='data',
                                value=add_location(ast.Name(id='data', ctx=ast.Load()))
                            )),
                            add_location(ast.keyword(
                                arg='format',
                                value=add_location(ast.Constant(value='json', kind=None))
                            )),
                            add_location(ast.keyword(
                                arg='headers',
                                value=add_location(ast.Attribute(
                                    value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                ))
                            ))
                        ]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='created_data', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='json', ctx=ast.Load())),
                            attr='loads',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='create_response', ctx=ast.Load())),
                                attr='content',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='resource_id', ctx=ast.Store()))],
                    value=add_location(ast.Subscript(
                        value=add_location(ast.Name(id='created_data', ctx=ast.Load())),
                        slice=add_location(ast.Constant(value='id', kind=None)),
                        ctx=ast.Load()
                    ))
                )),
            ])
        else:
            # If no create operation, assume resource with ID 1 exists
            body.append(
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='resource_id', ctx=ast.Store()))],
                    value=add_location(ast.Constant(value=1, kind=None))
                ))
            )

        # Add delete request with authentication
        body.extend([
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='delete_url', ctx=ast.Store()))],
                value=add_location(ast.BinOp(
                    left=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='api_base',
                        ctx=ast.Load()
                    )),
                    op=add_location(ast.Add()),
                    right=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Constant(
                                value=f"{delete_op['path'].replace(f'<{pk_param}>', '{}')}/",
                                kind=None
                            )),
                            attr='format',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='resource_id', ctx=ast.Load()))],
                        keywords=[]
                    ))
                ))
            )),
            add_location(ast.Assign(
                targets=[add_location(ast.Name(id='delete_response', ctx=ast.Store()))],
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='client',
                            ctx=ast.Load()
                        )),
                        attr='delete',
                        ctx=ast.Load()
                    )),
                    args=[add_location(ast.Name(id='delete_url', ctx=ast.Load()))],
                    keywords=[
                        add_location(ast.keyword(
                            arg='headers',
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='auth_headers',
                                ctx=ast.Load()
                            ))
                        ))
                    ]
                ))
            )),
            add_location(ast.Expr(
                value=add_location(ast.Call(
                    func=add_location(ast.Attribute(
                        value=add_location(ast.Name(id='self', ctx=ast.Load())),
                        attr='assertEqual',
                        ctx=ast.Load()
                    )),
                    args=[
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='delete_response', ctx=ast.Load())),
                            attr='status_code',
                            ctx=ast.Load()
                        )),
                        add_location(ast.Attribute(
                            value=add_location(ast.Name(id='status', ctx=ast.Load())),
                            attr='HTTP_204_NO_CONTENT',
                            ctx=ast.Load()
                        ))
                    ],
                    keywords=[]
                ))
            )),
        ])

        # If retrieve operation is available, verify the deletion
        if retrieve_op:
            # Find the primary key parameter in the retrieve path
            retrieve_pk_param = self._find_primary_key_param(retrieve_op['path'], retrieve_op['operation'])
            if not retrieve_pk_param:
                retrieve_pk_param = 'id'  # Default if not found

            body.extend([
                add_location(ast.Expr(
                    value=add_location(ast.Constant(
                        value="Verify the resource was deleted",
                        kind=None
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='retrieve_url', ctx=ast.Store()))],
                    value=add_location(ast.BinOp(
                        left=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='api_base',
                            ctx=ast.Load()
                        )),
                        op=add_location(ast.Add()),
                        right=add_location(ast.Call(
                            func=add_location(ast.Attribute(
                                value=add_location(ast.Constant(
                                    value=f"{retrieve_op['path'].replace(f'<{retrieve_pk_param}>', '{}')}/",
                                    kind=None
                                )),
                                attr='format',
                                ctx=ast.Load()
                            )),
                            args=[add_location(ast.Name(id='resource_id', ctx=ast.Load()))],
                            keywords=[]
                        ))
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='get_response', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='client',
                                ctx=ast.Load()
                            )),
                            attr='get',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='retrieve_url', ctx=ast.Load()))],
                        keywords=[
                            add_location(ast.keyword(
                                arg='headers',
                                value=add_location(ast.Attribute(
                                    value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                ))
                            ))
                        ]
                    ))
                )),
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='assertEqual',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='get_response', ctx=ast.Load())),
                                attr='status_code',
                                ctx=ast.Load()
                            )),
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='status', ctx=ast.Load())),
                                attr='HTTP_404_NOT_FOUND',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
            ])

        return _create_function_def(
            name=f'test_delete_{resource_name}',
            args=add_location(ast.arguments(
                posonlyargs=[],
                args=[_create_arg('self')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[],
                vararg=None,
                kwarg=None
            )),
            body=body,
            decorator_list=[]
        )

    def _create_test_crud_method(self, resource_name: str, crud_ops: Dict) -> Optional[ast.FunctionDef]:
        """
        Create a test method for a complete CRUD cycle with authentication.

        Args:
            resource_name: Name of the resource
            crud_ops: CRUD operations dictionary

        Returns:
            An AST FunctionDef node for the test method or None if essential operations are missing
        """
        operations = crud_ops['operations']
        paths = crud_ops['paths']

        create_op_id = operations['create']
        retrieve_op_id = operations['retrieve']
        update_op_id = operations['update'] or operations['patch']
        delete_op_id = operations['delete']

        # Skip if essential operations are missing
        if not create_op_id or not retrieve_op_id:
            return None

        body = [
            add_location(ast.Expr(
                value=add_location(ast.Constant(
                    value=f"Test the complete CRUD cycle for {resource_name} resource.",
                    kind=None
                ))
            )),
            add_location(ast.Expr(
                value=add_location(ast.Constant(
                    value="1. Create a resource",
                    kind=None
                ))
            )),
        ]

        resources = self.endpoint_analyzer.identify_resources_from_tags()
        resource_ops = resources.get(resource_name, {})

        # Add request data for create operation
        if create_op_id and create_op_id in resource_ops:
            create_op = resource_ops[create_op_id]
            body.append(self._generate_request_data_assignment(resource_name, create_op['operation']))

            # Add create request with authentication
            body.extend([
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='create_url', ctx=ast.Store()))],
                    value=add_location(ast.BinOp(
                        left=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='api_base',
                            ctx=ast.Load()
                        )),
                        op=add_location(ast.Add()),
                        right=add_location(ast.Constant(
                            value=f"{create_op['path'].split('<')[0]}/",
                            kind=None
                        ))
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='create_response', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='client',
                                ctx=ast.Load()
                            )),
                            attr='post',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='create_url', ctx=ast.Load()))],
                        keywords=[
                            add_location(ast.keyword(
                                arg='data',
                                value=add_location(ast.Name(id='data', ctx=ast.Load()))
                            )),
                            add_location(ast.keyword(
                                arg='format',
                                value=add_location(ast.Constant(value='json', kind=None))
                            )),
                            add_location(ast.keyword(
                                arg='headers',
                                value=add_location(ast.Attribute(
                                    value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                ))
                            ))
                        ]
                    ))
                )),
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='assertEqual',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='create_response', ctx=ast.Load())),
                                attr='status_code',
                                ctx=ast.Load()
                            )),
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='status', ctx=ast.Load())),
                                attr='HTTP_201_CREATED',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='created_data', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='json', ctx=ast.Load())),
                            attr='loads',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='create_response', ctx=ast.Load())),
                                attr='content',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='assertIn',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Constant(value='id', kind=None)),
                            add_location(ast.Name(id='created_data', ctx=ast.Load()))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='resource_id', ctx=ast.Store()))],
                    value=add_location(ast.Subscript(
                        value=add_location(ast.Name(id='created_data', ctx=ast.Load())),
                        slice=add_location(ast.Constant(value='id', kind=None)),
                        ctx=ast.Load()
                    ))
                )),
            ])

        # 2. Retrieve and verify the resource
        if retrieve_op_id and retrieve_op_id in resource_ops:
            retrieve_op = resource_ops[retrieve_op_id]

            # Find the primary key parameter in the retrieve path
            pk_param = self._find_primary_key_param(retrieve_op['path'], retrieve_op['operation'])
            if not pk_param:
                pk_param = 'id'  # Default if not found

            body.extend([
                add_location(ast.Expr(
                    value=add_location(ast.Constant(
                        value="2. Retrieve the created resource",
                        kind=None
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='retrieve_url', ctx=ast.Store()))],
                    value=add_location(ast.BinOp(
                        left=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='api_base',
                            ctx=ast.Load()
                        )),
                        op=add_location(ast.Add()),
                        right=add_location(ast.Call(
                            func=add_location(ast.Attribute(
                                value=add_location(ast.Constant(
                                    value=f"{retrieve_op['path'].replace(f'<{pk_param}>', '{}')}/",
                                    kind=None
                                )),
                                attr='format',
                                ctx=ast.Load()
                            )),
                            args=[add_location(ast.Name(id='resource_id', ctx=ast.Load()))],
                            keywords=[]
                        ))
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='retrieve_response', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Attribute(
                                value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                attr='client',
                                ctx=ast.Load()
                            )),
                            attr='get',
                            ctx=ast.Load()
                        )),
                        args=[add_location(ast.Name(id='retrieve_url', ctx=ast.Load()))],
                        keywords=[
                            add_location(ast.keyword(
                                arg='headers',
                                value=add_location(ast.Attribute(
                                    value=add_location(ast.Name(id='self', ctx=ast.Load())),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                ))
                            ))
                        ]
                    ))
                )),
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='assertEqual',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='retrieve_response', ctx=ast.Load())),
                                attr='status_code',
                                ctx=ast.Load()
                            )),
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='status', ctx=ast.Load())),
                                attr='HTTP_200_OK',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='retrieved_data', ctx=ast.Store()))],
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='json', ctx=ast.Load())),
                            attr='loads',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Attribute(
                                value=add_location(ast.Name(id='retrieve_response', ctx=ast.Load())),
                                attr='content',
                                ctx=ast.Load()
                            ))
                        ],
                        keywords=[]
                    ))
                )),
                add_location(ast.Expr(
                    value=add_location(ast.Call(
                        func=add_location(ast.Attribute(
                            value=add_location(ast.Name(id='self', ctx=ast.Load())),
                            attr='assertEqual',
                            ctx=ast.Load()
                        )),
                        args=[
                            add_location(ast.Subscript(
                                value=add_location(ast.Name(id='retrieved_data', ctx=ast.Load())),
                                slice=add_location(ast.Constant(value='id', kind=None)),
                                ctx=ast.Load()
                            )),
                            add_location(ast.Name(id='resource_id', ctx=ast.Load()))
                        ],
                        keywords=[]
                    ))
                )),
            ])

        # 3. Update the resource
        if update_op_id and update_op_id in resource_ops:
            update_op = resource_ops[update_op_id]
            update_method = update_op['method']

            # Find the primary key parameter in the update path
            pk_param = self._find_primary_key_param(update_op['path'], update_op['operation'])
            if not pk_param:
                pk_param = 'id'  # Default if not found

            body.extend([
                add_location(ast.Expr(
                    value=add_location(ast.Constant(
                        value=f"3. Update the resource using {update_method.upper()}",
                        kind=None
                    ))
                )),
                add_location(ast.Assign(
                    targets=[add_location(ast.Name(id='update_data', ctx=ast.Store()))],
                    value=add_location(ast.Dict(
                        keys=[],
                        values=[]
                    ))
                )),
            ])

            # Modify one field for update
            sample_data = self.schema_analyzer.generate_request_data(update_op['operation'])
            modified_field = None

            for key in sample_data.keys():
                if key not in ('id', 'pk') and not key.startswith('created_') and not key.startswith('updated_'):
                    modified_field = key
                    # Modified value based on type
                    if isinstance(sample_data[key], str):
                        body.append(
                            add_location(ast.Assign(
                                targets=[add_location(ast.Subscript(
                                    value=add_location(ast.Name(id='update_data', ctx=ast.Load())),
                                    slice=add_location(ast.Constant(value=key, kind=None)),
                                    ctx=ast.Store()
                                ))],
                                value=add_location(ast.Constant(value=f"Updated {key} value", kind=None))
                            ))
                        )
                    elif isinstance(sample_data[key], (int, float)):
                        body.append(
                            add_location(ast.Assign(
                                targets=[add_location(ast.Subscript(
                                    value=add_location(ast.Name(id='update_data', ctx=ast.Load())),
                                    slice=add_location(ast.Constant(value=key, kind=None)),
                                    ctx=ast.Store()
                                ))],
                                value=add_location(ast.Constant(value=42, kind=None))
                            ))
                        )
                    elif isinstance(sample_data[key], bool):
                        body.append(
                            add_location(ast.Assign(
                                targets=[add_location(ast.Subscript(
                                    value=add_location(ast.Name(id='update_data', ctx=ast.Load())),
                                    slice=add_location(ast.Constant(value=key, kind=None)),
                                    ctx=ast.Store()
                                ))],
                                value=add_location(ast.Constant(value=not sample_data[key], kind=None))
                            ))
                        )
                    # Break after finding the first suitable field
                    break

            # If no field could be modified, add a test field
            if not modified_field:
                modified_field = 'test_field'
                body.append(
                    add_location(ast.Assign(
                        targets=[add_location(ast.Subscript(
                            value=add_location(ast.Name(id='update_data', ctx=ast.Load())),
                            slice=add_location(ast.Constant(value=modified_field, kind=None)),
                            ctx=ast.Store()
                        ))],
                        value=add_location(ast.Constant(value='test_value', kind=None))
                    ))
                )

            body.extend([
                ast.Assign(
                    targets=[
                        ast.Name(id='update_url', ctx=ast.Store())
                    ],
                    value=ast.BinOp(
                        left=ast.Attribute(
                            value=ast.Name(id='self', ctx=ast.Load()),
                            attr='api_base',
                            ctx=ast.Load()
                        ),
                        op=ast.Add(),
                        right=ast.Call(
                            func=ast.Attribute(
                                value=ast.Constant(
                                    value=f"{update_op['path'].replace(f'<{pk_param}>', '{}')}/",
                                    kind=None
                                ),
                                attr='format',
                                ctx=ast.Load()
                            ),
                            args=[
                                ast.Name(id='resource_id', ctx=ast.Load())
                            ],
                            keywords=[]
                        )
                    )
                ),
                ast.Assign(
                    targets=[
                        ast.Name(id='update_response', ctx=ast.Store())
                    ],
                    value=ast.Call(
                        func=ast.Attribute(
                            value=ast.Attribute(
                                value=ast.Name(id='self', ctx=ast.Load()),
                                attr='client',
                                ctx=ast.Load()
                            ),
                            attr=update_method,
                            ctx=ast.Load()
                        ),
                        args=[
                            ast.Name(id='update_url', ctx=ast.Load()),
                        ],
                        keywords=[
                            ast.keyword(
                                arg='data',
                                value=ast.Name(id='update_data', ctx=ast.Load())
                            ),
                            ast.keyword(
                                arg='format',
                                value=ast.Constant(value='json', kind=None)
                            ),
                            ast.keyword(
                                arg='headers',
                                value=ast.Attribute(
                                    value=ast.Name(id='self', ctx=ast.Load()),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                )
                            )
                        ]
                    )
                ),
                ast.Expr(
                    value=ast.Call(
                        func=ast.Attribute(
                            value=ast.Name(id='self', ctx=ast.Load()),
                            attr='assertEqual',
                            ctx=ast.Load()
                        ),
                        args=[
                            ast.Attribute(
                                value=ast.Name(id='update_response', ctx=ast.Load()),
                                attr='status_code',
                                ctx=ast.Load()
                            ),
                            ast.Attribute(
                                value=ast.Name(id='status', ctx=ast.Load()),
                                attr='HTTP_200_OK',
                                ctx=ast.Load()
                            )
                        ],
                        keywords=[]
                    )
                ),
            ])

            # Verify update with a GET request
            if retrieve_op_id and retrieve_op_id in resource_ops:
                body.extend([
                    ast.Expr(
                        value=ast.Constant(
                            value="Verify the update with a GET request",
                            kind=None
                        )
                    ),
                    ast.Assign(
                        targets=[
                            ast.Name(id='verify_response', ctx=ast.Store())
                        ],
                        value=ast.Call(
                            func=ast.Attribute(
                                value=ast.Attribute(
                                    value=ast.Name(id='self', ctx=ast.Load()),
                                    attr='client',
                                    ctx=ast.Load()
                                ),
                                attr='get',
                                ctx=ast.Load()
                            ),
                            args=[
                                ast.Name(id='retrieve_url', ctx=ast.Load())
                            ],
                            keywords=[
                                ast.keyword(
                                    arg='headers',
                                    value=ast.Attribute(
                                        value=ast.Name(id='self', ctx=ast.Load()),
                                        attr='auth_headers',
                                        ctx=ast.Load()
                                    )
                                )
                            ]
                        )
                    ),
                    ast.Expr(
                        value=ast.Call(
                            func=ast.Attribute(
                                value=ast.Name(id='self', ctx=ast.Load()),
                                attr='assertEqual',
                                ctx=ast.Load()
                            ),
                            args=[
                                ast.Attribute(
                                    value=ast.Name(id='verify_response', ctx=ast.Load()),
                                    attr='status_code',
                                    ctx=ast.Load()
                                ),
                                ast.Attribute(
                                    value=ast.Name(id='status', ctx=ast.Load()),
                                    attr='HTTP_200_OK',
                                    ctx=ast.Load()
                                )
                            ],
                            keywords=[]
                        )
                    ),
                    ast.Assign(
                        targets=[
                            ast.Name(id='verified_data', ctx=ast.Store())
                        ],
                        value=ast.Call(
                            func=ast.Attribute(
                                value=ast.Name(id='json', ctx=ast.Load()),
                                attr='loads',
                                ctx=ast.Load()
                            ),
                            args=[
                                ast.Attribute(
                                    value=ast.Name(id='verify_response', ctx=ast.Load()),
                                    attr='content',
                                    ctx=ast.Load()
                                )
                            ],
                            keywords=[]
                        )
                    ),
                    ast.Expr(
                        value=ast.Call(
                            func=ast.Attribute(
                                value=ast.Name(id='self', ctx=ast.Load()),
                                attr='assertEqual',
                                ctx=ast.Load()
                            ),
                            args=[
                                ast.Subscript(
                                    value=ast.Name(id='verified_data', ctx=ast.Load()),
                                    slice=ast.Constant(value=modified_field, kind=None),
                                    ctx=ast.Load()
                                ),
                                ast.Subscript(
                                    value=ast.Name(id='update_data', ctx=ast.Load()),
                                    slice=ast.Constant(value=modified_field, kind=None),
                                    ctx=ast.Load()
                                )
                            ],
                            keywords=[]
                        )
                    ),
                ])

        # 4. Delete the resource
        if delete_op_id and delete_op_id in resource_ops:
            delete_op = resource_ops[delete_op_id]

            # Find the primary key parameter in the delete path
            pk_param = self._find_primary_key_param(delete_op['path'], delete_op['operation'])
            if not pk_param:
                pk_param = 'id'  # Default if not found

            body.extend([
                ast.Expr(
                    value=ast.Constant(
                        value="4. Delete the resource",
                        kind=None
                    )
                ),
                ast.Assign(
                    targets=[
                        ast.Name(id='delete_url', ctx=ast.Store())
                    ],
                    value=ast.BinOp(
                        left=ast.Attribute(
                            value=ast.Name(id='self', ctx=ast.Load()),
                            attr='api_base',
                            ctx=ast.Load()
                        ),
                        op=ast.Add(),
                        right=ast.Call(
                            func=ast.Attribute(
                                value=ast.Constant(
                                    value=f"{delete_op['path'].replace(f'<{pk_param}>', '{}')}/",
                                    kind=None
                                ),
                                attr='format',
                                ctx=ast.Load()
                            ),
                            args=[
                                ast.Name(id='resource_id', ctx=ast.Load())
                            ],
                            keywords=[]
                        )
                    )
                ),
                ast.Assign(
                    targets=[
                        ast.Name(id='delete_response', ctx=ast.Store())
                    ],
                    value=ast.Call(
                        func=ast.Attribute(
                            value=ast.Attribute(
                                value=ast.Name(id='self', ctx=ast.Load()),
                                attr='client',
                                ctx=ast.Load()
                            ),
                            attr='delete',
                            ctx=ast.Load()
                        ),
                        args=[
                            ast.Name(id='delete_url', ctx=ast.Load())
                        ],
                        keywords=[
                            ast.keyword(
                                arg='headers',
                                value=ast.Attribute(
                                    value=ast.Name(id='self', ctx=ast.Load()),
                                    attr='auth_headers',
                                    ctx=ast.Load()
                                )
                            )
                        ]
                    )
                ),
                ast.Expr(
                    value=ast.Call(
                        func=ast.Attribute(
                            value=ast.Name(id='self', ctx=ast.Load()),
                            attr='assertEqual',
                            ctx=ast.Load()
                        ),
                        args=[
                            ast.Attribute(
                                value=ast.Name(id='delete_response', ctx=ast.Load()),
                                attr='status_code',
                                ctx=ast.Load()
                            ),
                            ast.Attribute(
                                value=ast.Name(id='status', ctx=ast.Load()),
                                attr='HTTP_204_NO_CONTENT',
                                ctx=ast.Load()
                            )
                        ],
                        keywords=[]
                    )
                ),
            ])

            # Verify deletion if retrieve operation exists
            if retrieve_op_id and retrieve_op_id in resource_ops:
                body.extend([
                    ast.Expr(
                        value=ast.Constant(
                            value="Verify the resource was deleted",
                            kind=None
                        )
                    ),
                    ast.Assign(
                        targets=[
                            ast.Name(id='verify_delete_response', ctx=ast.Store())
                        ],
                        value=ast.Call(
                            func=ast.Attribute(
                                value=ast.Attribute(
                                    value=ast.Name(id='self', ctx=ast.Load()),
                                    attr='client',
                                    ctx=ast.Load()
                                ),
                                attr='get',
                                ctx=ast.Load()
                            ),
                            args=[
                                ast.Name(id='retrieve_url', ctx=ast.Load())
                            ],
                            keywords=[
                                ast.keyword(
                                    arg='headers',
                                    value=ast.Attribute(
                                        value=ast.Name(id='self', ctx=ast.Load()),
                                        attr='auth_headers',
                                        ctx=ast.Load()
                                    )
                                )
                            ]
                        )
                    ),
                    ast.Expr(
                        value=ast.Call(
                            func=ast.Attribute(
                                value=ast.Name(id='self', ctx=ast.Load()),
                                attr='assertEqual',
                                ctx=ast.Load()
                            ),
                            args=[
                                ast.Attribute(
                                    value=ast.Name(id='verify_delete_response', ctx=ast.Load()),
                                    attr='status_code',
                                    ctx=ast.Load()
                                ),
                                ast.Attribute(
                                    value=ast.Name(id='status', ctx=ast.Load()),
                                    attr='HTTP_404_NOT_FOUND',
                                    ctx=ast.Load()
                                )
                            ],
                            keywords=[]
                        )
                    ),
                ])

        return ast.FunctionDef(
            name=f'test_{resource_name}_crud_cycle',
            args=ast.arguments(
                posonlyargs=[],
                args=[ast.arg(arg='self', annotation=None)],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[],
                vararg=None,
                kwarg=None
            ),
            body=body,
            decorator_list=[],
            returns=None
        )

    def generate_testcase_class(self, resource_name: str, crud_ops: Dict) -> ast.ClassDef:
        """
        Generate a Django TestCase class for the given resource.

        Args:
            resource_name: The name of the resource
            crud_ops: The CRUD operations for the resource

        Returns:
            An AST ClassDef node
        """
        # 1. Create class methods
        methods = []

        # Add setup and teardown methods
        setup_method = self._create_setup_method(resource_name)
        teardown_method = self._create_teardown_method()
        methods.extend([setup_method, teardown_method])

        # Create test methods for each CRUD operation
        for op_type in ['create', 'list', 'retrieve', 'update', 'delete']:
            if op_type in crud_ops:
                method_creator = getattr(self, f'_create_test_{op_type}_method')
                args = [resource_name, crud_ops[op_type]]

                # Include related operations for methods that need them
                if op_type in ['retrieve', 'update', 'delete'] and 'create' in crud_ops:
                    args.append(crud_ops['create'])
                if op_type in ['update', 'delete'] and 'retrieve' in crud_ops:
                    args.append(crud_ops['retrieve'])

                test_method = method_creator(*args)
                methods.append(test_method)

        # Add a full CRUD test if all operations are available
        if set(crud_ops.keys()) >= {'create', 'retrieve', 'update', 'delete'}:
            crud_method = self._create_test_crud_method(resource_name, crud_ops)
            if crud_method:
                methods.append(crud_method)

        # 2. Create the class definition
        class_name = f"{resource_name.title()}ApiTests"
        class_def = add_location(ast.ClassDef(
            name=class_name,
            bases=[_create_name('APITestCase')],
            keywords=[],
            body=methods,
            decorator_list=[]
        ))

        return class_def

    def generate_test_file(self, output_path: Optional[str] = None) -> str:
        """
        Generate a complete test file with test cases for all identified resources.

        Args:
            output_path: Path to write the generated code (optional)

        Returns:
            The generated Python code as a string
        """
        # Create the AST module
        module = add_location(ast.Module(
            body=self._create_import_statements(),
            type_ignores=[]
        ))

        # Add test classes for each resource
        crud_groups = self.endpoint_analyzer.identify_crud_groups()

        for resource_name, crud_ops in crud_groups.items():
            test_class = self.generate_testcase_class(resource_name, crud_ops)
            module.body.append(test_class)

        # Generate code from the AST using ast.unparse (Python 3.9+)
        code = ast.unparse(module)

        # Write to file if path is provided
        if output_path:
            formatted_code = format_python_code_using_black(output_path, code)
            with open(output_path, 'w') as f:
                f.write(formatted_code)
            return formatted_code

        return code


def main():
    """Main entry point for the command-line tool."""
    parser = argparse.ArgumentParser(
        description="Generate Django API tests from an OpenAPI specification."
    )
    parser.add_argument(
        "spec_path",
        help="Path to the OpenAPI specification file (.json or .yaml)"
    )
    parser.add_argument(
        "-o", "--output",
        help="Output path for the generated test file",
        default="tests_api.py"
    )
    parser.add_argument(
        "--api-base",
        help="Base path for API endpoints",
        default=""  # Empty string for now, customizable
    )
    parser.add_argument(
        "--use-existing",
        action="store_true",
        help="Use an existing OpenAPI spec file instead of parsing it anew"
    )

    args = parser.parse_args()

    try:
        # Load the OpenAPI spec
        print(f"Reading OpenAPI specification from {args.spec_path}")
        with open(args.spec_path, 'r') as f:
            if args.spec_path.endswith('.json'):
                spec_dict = json.load(f)
            elif args.spec_path.endswith(('.yaml', '.yml')):
                spec_dict = yaml.safe_load(f)
            else:
                raise ValueError(f"Unsupported file format: {args.spec_path}. Use .json, .yaml, or .yml")

        # Initialize the handler with the spec dictionary
        print("Initializing OpenAPI spec handler")
        handler = OpenAPISpecHandler(spec_dict)

        # Initialize analyzers
        print("Setting up endpoint and schema analyzers")
        endpoint_analyzer = EndpointAnalyzer(handler)
        schema_analyzer = SchemaAnalyzer(handler)

        # Generate tests
        print("Generating test classes")
        test_generator = TestCaseGenerator(endpoint_analyzer, schema_analyzer, args.api_base)
        code = test_generator.generate_test_file(args.output)

        print(f"Successfully generated API tests in {args.output}")

        # Summary of resources
        crud_groups = endpoint_analyzer.identify_crud_groups()
        print(f"\nGenerated tests for {len(crud_groups)} resources:")

        for resource, ops in crud_groups.items():
            available_ops = [op for op, value in ops['operations'].items() if value]
            print(f"  - {resource}: {', '.join(available_ops)}")

    except FileNotFoundError:
        print(f"Error: Could not find the OpenAPI specification file at {args.spec_path}")
        return 1
    except Exception as e:
        print(f"Error: {str(e)}")
        traceback.print_exc()
        return 1

    return 0

if __name__ == "__main__":
    import sys
    sys.exit(main())
