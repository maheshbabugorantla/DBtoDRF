# Generated by drf-auto-generator.
# Defines serializers for converting model instances to/from representations.

from rest_framework import serializers
# Import models from the current app's models.py
from .models import {% for table in tables %}{{ table.model_name }}{% if not loop.last %}, {% endif %}{% endfor %}

{% for table in tables %}

class {{ table.model_name }}Serializer(serializers.ModelSerializer):
    """Serializer for the {{ table.model_name }} model."""

    # --- Relationship Field Representation ---
    # Customize how related objects are serialized based on config.relation_style
    {% if config.relation_style == 'link' %}
        {% for rel in table.relationships %}
            {% if rel.type == 'many-to-one' %}
    {{ rel.name }} = serializers.HyperlinkedRelatedField(
        view_name='{{ rel.target_name|lower }}-detail', # Assumes view name format
        read_only=True # Or queryset=... if writable links needed
    )
            {% elif rel.type in ['one-to-many', 'many-to-many'] %}
    {{ rel.name }} = serializers.HyperlinkedRelatedField(
        view_name='{{ rel.target_name|lower }}-detail', # Assumes view name format
        many=True,
        read_only=True
    )
            {% endif %}
        {% endfor %}
    {% elif config.relation_style == 'nested' %}
        # Nested serialization can get complex quickly, especially for writes.
        # Defaulting to read-only nesting is often safer for auto-generation.
        # Define related serializers first if nesting non-read-only.
        {% for rel in table.relationships %}
            {% if rel.type == 'many-to-one' %}
    # {{ rel.name }} = {{ rel.target_model_name }}Serializer(read_only=True) # Example read-only nested object
            {% elif rel.type in ['one-to-many', 'many-to-many'] %}
    # {{ rel.name }} = {{ rel.target_model_name }}Serializer(many=True, read_only=True) # Example read-only nested list
            {% endif %}
        {% endfor %}
    {% else %} {# Default: 'pk' style - ModelSerializer handles PrimaryKeyRelatedField by default #}
        # PrimaryKeyRelatedField is handled implicitly by ModelSerializer
        # if ForeignKey/ManyToManyField are defined correctly in models.py.
        # No explicit field declarations needed here for basic 'pk' style.
    {% endif %}

    # --- Meta Class ---
    class Meta:
        model = {{ table.model_name }}
        # --- Field Inclusion ---
        # Start with all fields from the model
        fields = '__all__'
        # --- OR --- Explicitly list fields:
        # fields = [
        #    {%- for field in table.fields if not field.is_handled_by_relation or field.is_pk %} # Include non-relation fields + PK
        #    '{{ field.name }}',
        #    {%- endfor %}
        #    {%- for rel in table.relationships %} # Include relation fields
        #    '{{ rel.name }}',
        #    {%- endfor %}
        # ]

        # --- Read-Only Fields ---
        # Fields that should not be writable via the API (e.g., auto-generated PKs, timestamps)
        read_only_fields = [
            {%- for field in table.fields if field.is_pk %} # Mark PK as read-only
            '{{ field.name }}',
            {%- endfor %}
            # Add other fields if conventions suggest they are read-only (e.g., created_at, updated_at)
            # 'created_at',
            # 'updated_at',
        ]

        # --- Nested Serialization Depth (Use with caution) ---
        {% if config.relation_style == 'nested' %}
        # depth = 1 # Automatically nest one level deep. Overrides explicit nested serializers above.
        {% endif %}

    # --- Custom Validation (Optional) ---
    # def validate_<field_name>(self, value): ...
    # def validate(self, data): ...

{% endfor %}
