# Generated by drf-auto-generator.
# Models based on introspected database schema.
# IMPORTANT: Review and refine these models, especially relationships and field types.

from django.db import models
import uuid # Import if UUIDField is used

# --- Helper to represent complex defaults (rarely needed with introspection) ---
# def parse_default(default_str): ... # (Can be removed if default handling is basic)


{% macro render_options(options) -%}
    {#- 1. Filter options first to get only those that will actually be rendered -#}
    {%- set rendered_options = {} -%}
    {%- for key, value in options.items() -%}
        {%- if value is not none and value is not sameas false -%}
            {# Use 'do' to update the dict within the loop #}
            {%- do rendered_options.update({key: value}) -%}
        {%- endif -%}
    {%- endfor -%}

    {#- 2. Now iterate through the *filtered* options -#}
    {%- for key, value in rendered_options.items() -%}
        {#- Print the key=value part -#}
        {%- if value is sameas true -%}
            {{ key }}=True
        {%- elif key in ['max_digits', 'decimal_places', 'max_length'] -%}
            {{ key }}={{ value }}
        {%- else -%}
            {{ key }}={{ value|repr|safe }}
        {%- endif -%}
        {#- Add comma and space ONLY if it's NOT the last item in this *filtered* loop -#}
        {%- if not loop.last %}, {% endif -%}
    {%- endfor -%}
{%- endmacro %}

# --- Model Definitions ---
{% for table in tables %}

class {{ table.model_name }}(models.Model):
    """Represents the '{{ table.name }}' table."""

    {# --- Regular Fields (derived from columns) --- #}
    {% for field in table.fields if not field.is_handled_by_relation %}
    {{ field.name }} = models.{{ field.type }}({{ render_options(field.options) }})
    {% endfor %}

    {# --- Relationship Fields (ManyToOne / ForeignKey) --- #}
    {%- for rel in table.relationships if rel.type == 'many-to-one' %}
    {{ rel.name }} = models.ForeignKey(
        '{{ rel.target_model_name }}',
        on_delete={{ rel.django_field_options.on_delete | default('models.CASCADE') }},
        db_column='{{ rel.django_field_options.db_column }}',
        related_name='{{ rel.related_name }}',
        verbose_name='{{ rel.name|replace("_", " ")|capitalize }}'{% if rel.django_field_options.null %},
        null=True{% endif %}{% if rel.django_field_options.blank %},
        blank=True{% endif %}
    )
    {%- endfor %}

    {# --- Relationship Fields (ManyToMany) --- #}
    {%- for rel in table.relationships if rel.type == 'many-to-many' %}
    {{ rel.name }} = models.ManyToManyField(
        '{{ rel.target_model_name }}',{% if rel.through_model_name %}
        through='{{ rel.through_model_name }}',{% elif rel.through_table %}
        db_table='{{ rel.through_table }}',{% endif %}
        related_name='{{ rel.related_name }}',
        verbose_name='{{ rel.name|replace("_", " ")|capitalize }}',
        blank=True
    )
    {%- endfor %}

    class Meta:
        db_table = '{{ table.name }}'
        managed = False
        verbose_name = '{{ table.model_name }}'
        verbose_name_plural = '{{ p.plural(table.model_name) if p.plural(table.model_name) else table.model_name + "s" }}'
        {% if table.primary_key_columns %}
        # ordering = ['{{ (table.fields|selectattr('is_pk', 'equalto', True)|first).name }}']
        {% endif %}

        {% set constraints_to_render = table.meta_constraints|selectattr('type', 'equalto', 'unique')|list %}
        {% if constraints_to_render %}
        constraints = [
            {% for constraint in constraints_to_render -%}
            models.UniqueConstraint(
                fields=[{{ constraint.fields|map('tojson')|join(', ') }}]
            ){% if not loop.last %},{% endif %}
            {% endfor %}
        ]
        {% endif %}

        {% if table.meta_indexes %}
        {% if constraints_to_render %}

        {% endif %}
        indexes = [
            {% for index in table.meta_indexes -%}
            models.Index(
                fields=[{{ index.fields|map('tojson')|join(', ') }}]
            ){% if not loop.last %},{% endif %}
            {% endfor %}
        ]
        {% endif %}

    def __str__(self):
        """Return a string representation of the model instance."""
        {% set str_field = (table.fields|selectattr('name', 'in', ['name', 'title', 'username', 'email', 'description'])|first) %}

        {% if str_field %}
        if hasattr(self, '{{ str_field.name }}'):
            value = getattr(self, '{{ str_field.name }}', None)
            if value:
                return str(value)
        {% endif %}

        {% set pk_field = (table.fields|selectattr('is_pk', 'equalto', True)|first) %}
        {% if pk_field %}
        pk_field_name = '{{ pk_field.name }}'
        if hasattr(self, pk_field_name):
            return f"{self._meta.verbose_name} {getattr(self, pk_field_name, 'N/A')}"
        else:
            return f"{self._meta.verbose_name} object (PK not loaded)"
        {% else %}
        return f"{self._meta.verbose_name} object (ID: {self.pk if hasattr(self, 'pk') else 'N/A'})"
        {% endif %}

{% endfor %}
