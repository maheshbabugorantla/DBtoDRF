# File: templates/settings.py.j2
"""
Django settings for {{ project_name }} project.

Generated by drf-auto-generator tool.

For more information on this file, see
https://docs.djangoproject.com/en/stable/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/stable/ref/settings/
"""

from pathlib import Path
import os
import json # Import json module for pretty printing the database config
import sys

# To load environment variables from .env file
from dotenv import load_dotenv
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file in the project root (where manage.py is)
load_dotenv(BASE_DIR / '.env')

# --- Security Settings ---
# Raise ImproperlyConfigured exception if SECRET_KEY is not set
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ImproperlyConfigured("SECRET_KEY not found in environment variables. Please set it in .env file.")

DEBUG = os.environ.get('DEBUG', 'False').lower() in ['true', '1', 't', 'y', 'yes']

# Read ALLOWED_HOSTS from environment (comma-separated string), default to empty list
_ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip() for host in _ALLOWED_HOSTS.split(',') if host.strip()]
if DEBUG and not set(['localhost', '127.0.0.1']) & set(ALLOWED_HOSTS):
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])


# --- Production Security Settings (Recommended when DEBUG=False) ---
# Consider uncommenting and configuring these in production:
# SECURE_SSL_REDIRECT = True # Redirect HTTP to HTTPS
# SECURE_HSTS_SECONDS = 31536000 # 1 year - Use a small value first for testing
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# SESSION_COOKIE_SECURE = True # Only send session cookie over HTTPS
# CSRF_COOKIE_SECURE = True # Only send CSRF cookie over HTTPS
# SECURE_BROWSER_XSS_FILTER = True
# SECURE_CONTENT_TYPE_NOSNIFF = True

# --- Application Definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # TODO: Add support for Django Whitenoise to serve static files
    # if this app is deployed behind a reverse proxy to serve static files
    # 'whitenoise.runserver_nostatic',  # Always add this before 'django.contrib.staticfiles'
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken', # For DRF Token Authentication
    'drf_spectacular',
    'corsheaders',
    '{{ app_name }}.apps.{{ app_name|capitalize }}Config',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # --- WhiteNoise (Serves static files, place high but after Security) ---
    # 'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = '{{ project_name }}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '{{ project_name }}.wsgi.application'

# --- ASGI Configuration (Optional) ---
# ASGI_APPLICATION = '{{ project_name }}.asgi.application'

# --- WhiteNoise Configuration (Optional) ---
# WHITENOISE_MAX_AGE = 31536000 # Cache static files for 1 year (if using versioned storage)

# --- Database Configuration ---
# https://docs.djangoproject.com/en/stable/ref/settings/#databases
# Populated from the 'databases' section of the generator's config file.
# IMPORTANT: Review security. Consider using environment variables for sensitive
# data like passwords in production (e.g., using django-environ).

DB_ENGINE = os.environ.get('DB_ENGINE')
DB_NAME = os.environ.get('DB_NAME')
if not DB_ENGINE or not DB_NAME:
    # Fallback to SQLite if essential DB env vars aren't set
    print("!!! WARNING: DB_ENGINE or DB_NAME not found in environment. Falling back to SQLite. !!!", file=sys.stderr)
    DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': BASE_DIR / 'db.sqlite3'}}

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'), # Can be empty for SQLite
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
    }
}

# --- Set Database Options Configuration ---
try:
    DB_OPTIONS_JSON = os.environ.get('DB_OPTIONS', '{}') # Get options as JSON string
    db_options = json.loads(DB_OPTIONS_JSON)
    if isinstance(db_options, dict):
        DATABASES['default']['OPTIONS'] = db_options
    elif DB_OPTIONS_JSON != '{}': # Only warn if it wasn't the default empty dict
            print(f"!!! WARNING: DB_OPTIONS environment variable was set but is not valid JSON: {DB_OPTIONS_JSON} !!!", file=sys.stderr)
except json.JSONDecodeError:
    print(f"!!! WARNING: Could not parse DB_OPTIONS environment variable as JSON: {DB_OPTIONS_JSON} !!!", file=sys.stderr)


# --- Password Validation ---
# https://docs.djangoproject.com/en/stable/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# --- Internationalization ---
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# --- Static files (CSS, JavaScript, Images) ---
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'


# --- Default primary key field type ---
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Append Slash Automatically at the end of URLs ---
APPEND_SLASH = True

# --- Django REST Framework Settings ---
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    # 'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticatedOrReadOnly', ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    # 'DEFAULT_FILTER_BACKENDS': [ 'rest_framework.filters.OrderingFilter', 'rest_framework.filters.SearchFilter', ],
}

# --- DRF Spectacular Settings ---
SPECTACULAR_SETTINGS = {
    'TITLE': '{{ config.openapi_title | default("My API") }}',
    'DESCRIPTION': '{{ config.openapi_description | default("API Documentation") }}',
    'VERSION': '{{ config.openapi_version | default("1.0.0") }}',
    'SERVE_INCLUDE_SCHEMA': True,
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_SPLIT_PATCH': True,
}

# --- CORS Headers Configuration (Read from Environment) ---
CORS_ALLOW_ALL_ORIGINS = os.environ.get('CORS_ALLOW_ALL_ORIGINS', 'False').lower() in ['true', '1', 't', 'y', 'yes']

if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS_CSV = os.environ.get('CORS_ALLOWED_ORIGINS', '')
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in CORS_ALLOWED_ORIGINS_CSV.split(',') if origin.strip()]
    if not CORS_ALLOWED_ORIGINS:
         print("!!! WARNING: CORS_ALLOW_ALL_ORIGINS is False but CORS_ALLOWED_ORIGINS is empty or not set. Cross-origin requests might be blocked. !!!", file=sys.stderr)
else:
     # If allowing all, ensure allowed list is not set (might cause conflict)
     CORS_ALLOWED_ORIGINS = []
     print("!!! WARNING: CORS_ALLOW_ALL_ORIGINS is True. Ensure this is intended, especially for production environments. !!!", file=sys.stderr)

# Add any other project-specific settings below
